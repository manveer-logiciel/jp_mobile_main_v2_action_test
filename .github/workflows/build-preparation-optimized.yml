name: Integration Build Preparation

on:
  workflow_dispatch:
    inputs:
      app_version:
        description: 'App Version (e.g., 3.37.2)'
        required: true
        type: string
      build_number:
        description: 'Build Number (e.g., 303700200)'
        required: true
        type: string
      build_platform:
        description: 'Select build platform'
        required: true
        type: choice
        options:
          - Both
          - Android
          - iOS
        default: Both

env:
  FLUTTER_VERSION: '3.27.2'
  JAVA_VERSION: '17'

jobs:
  prepare-and-validate:
    name: Prepare & Validate Build
    runs-on: ubuntu-latest  # Use Ubuntu for faster validation
    permissions:
      contents: write
    outputs:
      app_version: ${{ steps.validation.outputs.app_version }}
      build_number: ${{ steps.validation.outputs.build_number }}
      build_platform: ${{ steps.validation.outputs.build_platform }}
      should_build_android: ${{ steps.validation.outputs.should_build_android }}
      should_build_ios: ${{ steps.validation.outputs.should_build_ios }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Validate Inputs & Set Outputs
        id: validation
        run: |
          VERSION="${{ inputs.app_version }}"
          BUILD_NUMBER="${{ inputs.build_number }}"
          PLATFORM="${{ inputs.build_platform }}"
          
          echo "🔍 Validating inputs..."
          echo "📋 Version: $VERSION"
          echo "🔢 Build Number: $BUILD_NUMBER"
          echo "🏗️ Platform: $PLATFORM"
          
          # Validate version format (x.y.z where x, y, z are numbers)
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ ERROR: Invalid version format. Expected format: x.y.z (e.g., 3.37.2)"
            exit 1
          fi
          
          # Validate build number is numeric
          if [[ ! $BUILD_NUMBER =~ ^[0-9]+$ ]]; then
            echo "❌ ERROR: Build number must be numeric"
            exit 1
          fi
          
          echo "✅ Input validation successful"
          
          # Set outputs for next steps
          echo "app_version=$VERSION" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          echo "build_platform=$PLATFORM" >> $GITHUB_OUTPUT
          
          # Set conditional build flags
          if [[ "$PLATFORM" == "Android" || "$PLATFORM" == "Both" ]]; then
            echo "should_build_android=true" >> $GITHUB_OUTPUT
          else
            echo "should_build_android=false" >> $GITHUB_OUTPUT
          fi
          
          if [[ "$PLATFORM" == "iOS" || "$PLATFORM" == "Both" ]]; then
            echo "should_build_ios=true" >> $GITHUB_OUTPUT
          else
            echo "should_build_ios=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Update Version Files
        run: |
          VERSION="${{ steps.validation.outputs.app_version }}"
          BUILD_NUMBER="${{ steps.validation.outputs.build_number }}"
          
          echo "🔄 Updating version files..."
          
          # Update pubspec.yaml
          echo "📝 Updating pubspec.yaml: $VERSION+$BUILD_NUMBER"
          sed -i "s/^version: .*/version: $VERSION+$BUILD_NUMBER/" pubspec.yaml
          
          # Update global.dart
          echo "📝 Updating lib/common/libraries/global.dart: $VERSION"
          sed -i "s/String appVersion = '[^']*';/String appVersion = '$VERSION';/" lib/common/libraries/global.dart
          
          # Update iOS marketing version
          echo "📝 Updating iOS marketing version: $VERSION"
          sed -i "s/MARKETING_VERSION = [^;]*/MARKETING_VERSION = $VERSION/" ios/Runner.xcodeproj/project.pbxproj
          
          echo "✅ Version files updated successfully"
      
      - name: Commit Version Updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pubspec.yaml lib/common/libraries/global.dart ios/Runner.xcodeproj/project.pbxproj
          git commit -m "Update version to ${{ steps.validation.outputs.app_version }} (build ${{ steps.validation.outputs.build_number }})" || echo "No changes to commit"
          git push

  # Shared Flutter setup job that both Android and iOS can use
  setup-flutter-cache:
    name: Setup Flutter Cache
    runs-on: ubuntu-latest  # Use Ubuntu for faster setup
    needs: prepare-and-validate
    outputs:
      flutter-cache-key: ${{ steps.flutter-cache.outputs.cache-primary-key }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PRIVATE_REPO_TOKEN || secrets.GITHUB_TOKEN }}
          ref: main
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
      
      - name: Cache Flutter pub dependencies
        id: flutter-cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.PUB_CACHE }}
            ~/.pub-cache
            .dart_tool
          key: flutter-${{ runner.os }}-${{ env.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.lock') }}-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            flutter-${{ runner.os }}-${{ env.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.lock') }}-
            flutter-${{ runner.os }}-${{ env.FLUTTER_VERSION }}-
      
      - name: Configure Git for private repos
        run: |
          TOKEN="${{ secrets.PRIVATE_REPO_TOKEN || secrets.GITHUB_TOKEN }}"
          git config --global url."https://x-access-token:${TOKEN}@github.com/".insteadOf "https://github.com/"
      
      - name: Get Flutter dependencies
        run: flutter pub get

  build-android:
    name: Build Android (.aab)
    needs: [prepare-and-validate, setup-flutter-cache]
    if: ${{ needs.prepare-and-validate.outputs.should_build_android == 'true' }}
    runs-on: ubuntu-latest  # Use Ubuntu for Android builds - much faster!
    permissions:
      contents: read
      packages: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PRIVATE_REPO_TOKEN || secrets.GITHUB_TOKEN }}
          ref: main
      
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
      
      # Restore Flutter dependencies from cache
      - name: Restore Flutter pub dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            ${{ env.PUB_CACHE }}
            ~/.pub-cache
            .dart_tool
          key: flutter-${{ runner.os }}-${{ env.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.lock') }}-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            flutter-${{ runner.os }}-${{ env.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.lock') }}-
            flutter-${{ runner.os }}-${{ env.FLUTTER_VERSION }}-
      
      # Consolidated Android caching
      - name: Cache Android Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.android
            android/.gradle
            android/app/.gradle
            android/build
            ~/.konan
            ~/.kotlin
          key: android-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}-${{ hashFiles('**/*.kt') }}
          restore-keys: |
            android-${{ runner.os }}-${{ hashFiles('**/*.gradle*') }}-
            android-${{ runner.os }}-
      
      - name: Configure Git for private repos
        run: |
          TOKEN="${{ secrets.PRIVATE_REPO_TOKEN || secrets.GITHUB_TOKEN }}"
          git config --global url."https://x-access-token:${TOKEN}@github.com/".insteadOf "https://github.com/"
      
      # Simplified keystore creation (remove verbose debugging)
      - name: Create Android Keystore
        run: |
          echo "🔐 Creating keystore..."
          echo "${{ vars.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/keystore.jks
          chmod 600 android/keystore.jks
          echo "✅ Keystore created successfully"
      
      - name: Create key.properties
        run: |
          echo "🔑 Creating key.properties..."
          cat > android/key.properties << EOF
          storePassword=${{ vars.ANDROID_STORE_PASSWORD }}
          keyPassword=${{ vars.ANDROID_KEY_PASSWORD }}
          keyAlias=${{ vars.ANDROID_KEY_ALIAS }}
          storeFile=../keystore.jks
          EOF
          echo "✅ key.properties created successfully"
      
      - name: Update local.properties
        run: |
          cat > android/local.properties << EOF
          flutter.versionName=${{ needs.prepare-and-validate.outputs.app_version }}
          flutter.versionCode=${{ needs.prepare-and-validate.outputs.build_number }}
          flutter.sdk=$FLUTTER_ROOT
          EOF
      
      - name: Get Flutter dependencies (if cache miss)
        run: flutter pub get
      
      - name: Build App Bundle
        run: |
          echo "🔨 Building Android App Bundle..."
          flutter build appbundle --release --verbose
      
      - name: Upload App Bundle
        uses: actions/upload-artifact@v4
        with:
          name: android-app-bundle-${{ needs.prepare-and-validate.outputs.app_version }}-${{ needs.prepare-and-validate.outputs.build_number }}
          path: build/app/outputs/bundle/release/app-release.aab
          retention-days: 30
      
      - name: Build Summary
        run: |
          echo "## 🤖 Android Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Version** | \`${{ needs.prepare-and-validate.outputs.app_version }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Build Number** | \`${{ needs.prepare-and-validate.outputs.build_number }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Bundle Size** | \`$(du -h build/app/outputs/bundle/release/app-release.aab | cut -f1)\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **App Bundle ready for upload to Play Store**" >> $GITHUB_STEP_SUMMARY

  build-ios:
    name: Build iOS
    needs: [prepare-and-validate, setup-flutter-cache]
    if: ${{ needs.prepare-and-validate.outputs.should_build_ios == 'true' }}
    runs-on: macos-latest  # iOS requires macOS
    permissions:
      contents: read
      packages: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PRIVATE_REPO_TOKEN || secrets.GITHUB_TOKEN }}
          ref: main
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
      
      # Restore Flutter dependencies from cache
      - name: Restore Flutter pub dependencies
        uses: actions/cache/restore@v4
        with:
          path: |
            ${{ env.PUB_CACHE }}
            ~/.pub-cache
            ~/Library/Caches/dart-pub
            .dart_tool
          key: flutter-macOS-${{ env.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.lock') }}-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            flutter-macOS-${{ env.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.lock') }}-
            flutter-macOS-${{ env.FLUTTER_VERSION }}-
      
      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: |
            ios/Pods
            ~/.cocoapods
          key: cocoapods-${{ runner.os }}-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            cocoapods-${{ runner.os }}-
      
      - name: Configure Git for private repos
        run: |
          TOKEN="${{ secrets.PRIVATE_REPO_TOKEN || secrets.GITHUB_TOKEN }}"
          git config --global url."https://x-access-token:${TOKEN}@github.com/".insteadOf "https://github.com/"
      
      - name: Get Flutter dependencies (if cache miss)
        run: flutter pub get
      
      - name: Configure Xcode Project for Manual Signing
        run: |
          echo "🔧 Configuring Xcode project for manual signing..."
          
          # Function to safely set plist value (add if doesn't exist, set if exists)
          safe_pbxproj_set() {
            local target_id="$1"
            local key="$2"
            local value="$3"
            
            if /usr/libexec/PlistBuddy -c "Print :objects:$target_id:buildSettings:$key" ios/Runner.xcodeproj/project.pbxproj >/dev/null 2>&1; then
              /usr/libexec/PlistBuddy -c "Set :objects:$target_id:buildSettings:$key $value" ios/Runner.xcodeproj/project.pbxproj
            else
              /usr/libexec/PlistBuddy -c "Add :objects:$target_id:buildSettings:$key string $value" ios/Runner.xcodeproj/project.pbxproj
            fi
          }
          
          # Configure main app (Runner target) - Debug, Release, Profile
          echo "📱 Configuring main app signing..."
          safe_pbxproj_set "97C147061CF9000F007C117D" "CODE_SIGN_STYLE" "Manual"
          safe_pbxproj_set "97C147071CF9000F007C117D" "CODE_SIGN_STYLE" "Manual"
          safe_pbxproj_set "249021D4217E4FDB00AE95B9" "CODE_SIGN_STYLE" "Manual"
          
          safe_pbxproj_set "97C147061CF9000F007C117D" "CODE_SIGN_IDENTITY" "Apple Distribution"
          safe_pbxproj_set "97C147071CF9000F007C117D" "CODE_SIGN_IDENTITY" "Apple Distribution"
          safe_pbxproj_set "249021D4217E4FDB00AE95B9" "CODE_SIGN_IDENTITY" "Apple Distribution"
          
          # Configure Share Extension target - Debug, Release, Profile
          echo "📱 Configuring Share Extension signing..."
          safe_pbxproj_set "E2B11C5528B6384500902FF7" "CODE_SIGN_STYLE" "Manual"
          safe_pbxproj_set "E2B11C5628B6384500902FF7" "CODE_SIGN_STYLE" "Manual"
          safe_pbxproj_set "E2B11C5728B6384500902FF7" "CODE_SIGN_STYLE" "Manual"
          
          safe_pbxproj_set "E2B11C5528B6384500902FF7" "CODE_SIGN_IDENTITY" "Apple Distribution"
          safe_pbxproj_set "E2B11C5628B6384500902FF7" "CODE_SIGN_IDENTITY" "Apple Distribution"
          safe_pbxproj_set "E2B11C5728B6384500902FF7" "CODE_SIGN_IDENTITY" "Apple Distribution"
          
          echo "✅ Xcode project configured for manual signing (both main app and Share Extension)"
      
      - name: Install CocoaPods dependencies
        run: |
          cd ios
          pod install --repo-update
      
      # iOS Code Signing Setup
      - name: Setup iOS Code Signing
        env:
          IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE_BASE64 }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
          IOS_SHARE_EXTENSION_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_SHARE_EXTENSION_PROVISIONING_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.IOS_KEYCHAIN_PASSWORD }}
        run: |
          echo "🔐 Setting up iOS code signing..."
          
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          MAIN_PROFILE_PATH=$RUNNER_TEMP/main_app.mobileprovision
          SHARE_PROFILE_PATH=$RUNNER_TEMP/share_extension.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # Import certificate and provisioning profiles from secrets
          echo -n "$IOS_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$IOS_PROVISIONING_PROFILE_BASE64" | base64 --decode -o $MAIN_PROFILE_PATH
          echo -n "$IOS_SHARE_EXTENSION_PROVISIONING_PROFILE_BASE64" | base64 --decode -o $SHARE_PROFILE_PATH
          
          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$IOS_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # Install both provisioning profiles with proper UUIDs
          echo "📱 Installing provisioning profiles..."
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          
          # Extract UUID and Name from provisioning profiles
          MAIN_PROFILE_UUID=$(grep -A1 -a "UUID" $MAIN_PROFILE_PATH | grep string | sed 's/.*<string>\(.*\)<\/string>.*/\1/')
          SHARE_PROFILE_UUID=$(grep -A1 -a "UUID" $SHARE_PROFILE_PATH | grep string | sed 's/.*<string>\(.*\)<\/string>.*/\1/')
          
          MAIN_PROFILE_NAME=$(grep -A1 -a "Name" $MAIN_PROFILE_PATH | grep string | sed 's/.*<string>\(.*\)<\/string>.*/\1/')
          SHARE_PROFILE_NAME=$(grep -A1 -a "Name" $SHARE_PROFILE_PATH | grep string | sed 's/.*<string>\(.*\)<\/string>.*/\1/')
          
          echo "📋 Main app profile UUID: $MAIN_PROFILE_UUID"
          echo "📋 Main app profile Name: $MAIN_PROFILE_NAME"
          echo "📋 Share extension profile UUID: $SHARE_PROFILE_UUID"
          echo "📋 Share extension profile Name: $SHARE_PROFILE_NAME"
          
          # Copy profiles with proper UUID names
          cp $MAIN_PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles/$MAIN_PROFILE_UUID.mobileprovision
          cp $SHARE_PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles/$SHARE_PROFILE_UUID.mobileprovision
          
          # Update ExportOptions.plist with actual profile names
          echo "📝 Updating ExportOptions.plist with actual profile names..."
          /usr/libexec/PlistBuddy -c "Set :provisioningProfiles:com.job.progressapp $MAIN_PROFILE_NAME" ios/ExportOptions.plist
          /usr/libexec/PlistBuddy -c "Set :provisioningProfiles:com.job.progressapp.Share-Extension $SHARE_PROFILE_NAME" ios/ExportOptions.plist
          
          # Show updated ExportOptions.plist for debugging
          echo "📋 Updated ExportOptions.plist:"
          cat ios/ExportOptions.plist
          
          # List installed profiles for verification
          echo "📋 Installed provisioning profiles:"
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
          
          # Verify provisioning profiles content
          echo "📋 Verifying main app provisioning profile:"
          security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/$MAIN_PROFILE_UUID.mobileprovision | grep -A5 -B5 "com.job.progressapp"
          
          echo "📋 Verifying share extension provisioning profile:"
          security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/$SHARE_PROFILE_UUID.mobileprovision | grep -A5 -B5 "com.job.progressapp.Share-Extension"
          
          echo "✅ iOS code signing setup complete for main app and share extension"
      
      - name: Configure Provisioning Profile UUIDs in Xcode Project
        run: |
          echo "🔧 Setting provisioning profile UUIDs in Xcode project..."
          
          # Get the profile UUIDs that were extracted earlier
          MAIN_PROFILE_PATH=$RUNNER_TEMP/main_app.mobileprovision
          SHARE_PROFILE_PATH=$RUNNER_TEMP/share_extension.mobileprovision
          
          MAIN_PROFILE_UUID=$(grep -A1 -a "UUID" $MAIN_PROFILE_PATH | grep string | sed 's/.*<string>\(.*\)<\/string>.*/\1/')
          SHARE_PROFILE_UUID=$(grep -A1 -a "UUID" $SHARE_PROFILE_PATH | grep string | sed 's/.*<string>\(.*\)<\/string>.*/\1/')
          
          echo "📋 Setting Main app profile UUID: $MAIN_PROFILE_UUID"
          echo "📋 Setting Share extension profile UUID: $SHARE_PROFILE_UUID"
          
          # Function to safely set plist value (add if doesn't exist, set if exists)
          safe_pbxproj_set() {
            local target_id="$1"
            local key="$2"
            local value="$3"
            
            if /usr/libexec/PlistBuddy -c "Print :objects:$target_id:buildSettings:$key" ios/Runner.xcodeproj/project.pbxproj >/dev/null 2>&1; then
              /usr/libexec/PlistBuddy -c "Set :objects:$target_id:buildSettings:$key $value" ios/Runner.xcodeproj/project.pbxproj
            else
              /usr/libexec/PlistBuddy -c "Add :objects:$target_id:buildSettings:$key string $value" ios/Runner.xcodeproj/project.pbxproj
            fi
          }
          
          # Set provisioning profile UUIDs for main app (Runner target) - Debug, Release, Profile
          echo "📱 Setting main app provisioning profile UUIDs..."
          safe_pbxproj_set "97C147061CF9000F007C117D" "PROVISIONING_PROFILE_SPECIFIER" "$MAIN_PROFILE_UUID"
          safe_pbxproj_set "97C147071CF9000F007C117D" "PROVISIONING_PROFILE_SPECIFIER" "$MAIN_PROFILE_UUID"
          safe_pbxproj_set "249021D4217E4FDB00AE95B9" "PROVISIONING_PROFILE_SPECIFIER" "$MAIN_PROFILE_UUID"
          
          # Set development team for main app
          safe_pbxproj_set "97C147061CF9000F007C117D" "DEVELOPMENT_TEAM" "AU42F45627"
          safe_pbxproj_set "97C147071CF9000F007C117D" "DEVELOPMENT_TEAM" "AU42F45627"
          safe_pbxproj_set "249021D4217E4FDB00AE95B9" "DEVELOPMENT_TEAM" "AU42F45627"
          
          # Set provisioning profile UUIDs for Share Extension target - Debug, Release, Profile
          echo "📱 Setting Share Extension provisioning profile UUIDs..."
          safe_pbxproj_set "E2B11C5528B6384500902FF7" "PROVISIONING_PROFILE_SPECIFIER" "$SHARE_PROFILE_UUID"
          safe_pbxproj_set "E2B11C5628B6384500902FF7" "PROVISIONING_PROFILE_SPECIFIER" "$SHARE_PROFILE_UUID"
          safe_pbxproj_set "E2B11C5728B6384500902FF7" "PROVISIONING_PROFILE_SPECIFIER" "$SHARE_PROFILE_UUID"
          
          # Set development team for Share Extension
          safe_pbxproj_set "E2B11C5528B6384500902FF7" "DEVELOPMENT_TEAM" "AU42F45627"
          safe_pbxproj_set "E2B11C5628B6384500902FF7" "DEVELOPMENT_TEAM" "AU42F45627"
          safe_pbxproj_set "E2B11C5728B6384500902FF7" "DEVELOPMENT_TEAM" "AU42F45627"
          
          echo "✅ Provisioning profile UUIDs configured for both main app and Share Extension"
      
      - name: Update iOS Version
        run: |
          VERSION="${{ needs.prepare-and-validate.outputs.app_version }}"
          BUILD_NUMBER="${{ needs.prepare-and-validate.outputs.build_number }}"
          
          echo "📝 Updating iOS version to $VERSION ($BUILD_NUMBER)"
          
          # Function to safely set plist value (add if doesn't exist, set if exists)
          safe_plist_set() {
            local plist_file="$1"
            local key="$2"
            local value="$3"
            
            if /usr/libexec/PlistBuddy -c "Print :$key" "$plist_file" >/dev/null 2>&1; then
              /usr/libexec/PlistBuddy -c "Set :$key $value" "$plist_file"
            else
              /usr/libexec/PlistBuddy -c "Add :$key string $value" "$plist_file"
            fi
          }
          
          # Update Info.plist for main app
          echo "📱 Updating main app Info.plist..."
          safe_plist_set "ios/Runner/Info.plist" "CFBundleShortVersionString" "$VERSION"
          safe_plist_set "ios/Runner/Info.plist" "CFBundleVersion" "$BUILD_NUMBER"
          
          # Update Info.plist for share extension
          echo "📱 Updating share extension Info.plist..."
          safe_plist_set "ios/Share Extension/Info.plist" "CFBundleShortVersionString" "$VERSION"
          safe_plist_set "ios/Share Extension/Info.plist" "CFBundleVersion" "$BUILD_NUMBER"
          
          echo "✅ iOS version updated successfully for main app and share extension"
      
      - name: Build iOS Archive
        run: |
          echo "🔨 Building iOS archive..."
          flutter build ipa --release \
            --export-options-plist=ios/ExportOptions.plist \
            --build-name=${{ needs.prepare-and-validate.outputs.app_version }} \
            --build-number=${{ needs.prepare-and-validate.outputs.build_number }} \
            --dart-define=FLUTTER_WEB_AUTO_DETECT=true
      
      - name: Upload iOS App (.ipa)
        uses: actions/upload-artifact@v4
        with:
          name: ios-app-${{ needs.prepare-and-validate.outputs.app_version }}-${{ needs.prepare-and-validate.outputs.build_number }}
          path: build/ios/ipa/*.ipa
          retention-days: 30
      
      - name: Cleanup Keychain
        if: always()
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db || true
      
      - name: iOS Build Summary
        run: |
          echo "## 📱 iOS Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Version** | \`${{ needs.prepare-and-validate.outputs.app_version }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Build Number** | \`${{ needs.prepare-and-validate.outputs.build_number }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Bundle ID** | \`com.job.progressapp\` |" >> $GITHUB_STEP_SUMMARY
          if [ -f build/ios/ipa/*.ipa ]; then
            echo "| **IPA Size** | \`$(du -h build/ios/ipa/*.ipa | cut -f1)\` |" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **iOS app (.ipa) ready for distribution**" >> $GITHUB_STEP_SUMMARY

  build-summary:
    name: Build Summary
    needs: [prepare-and-validate, build-android, build-ios]
    if: always() && needs.prepare-and-validate.result == 'success'
    runs-on: ubuntu-latest
    
    steps:
      - name: Generate Final Summary
        run: |
          echo "## 🎉 Build Pipeline Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Build Target | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------------|--------|" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.prepare-and-validate.outputs.should_build_android }}" == "true" ]]; then
            if [[ "${{ needs.build-android.result }}" == "success" ]]; then
              echo "| **Android** | ✅ Success |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| **Android** | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "| **Android** | ⏭️ Skipped |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.prepare-and-validate.outputs.should_build_ios }}" == "true" ]]; then
            if [[ "${{ needs.build-ios.result }}" == "success" ]]; then
              echo "| **iOS** | ✅ Success |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| **iOS** | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "| **iOS** | ⏭️ Skipped |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** \`${{ needs.prepare-and-validate.outputs.app_version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Build Number:** \`${{ needs.prepare-and-validate.outputs.build_number }}\`" >> $GITHUB_STEP_SUMMARY
