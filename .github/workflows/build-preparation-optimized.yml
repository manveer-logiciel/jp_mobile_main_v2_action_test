name: Optimized Build Preparation (Fragmented)

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release Tag (e.g., 3.37.2)'
        required: true
        type: string
      verify_release_tag:
        description: 'Verify Release Tag (must match above)'
        required: true
        type: string
      password:
        description: 'Password for secure operations'
        required: true
        type: string
      build_platform:
        description: 'Select build platform'
        required: true
        type: choice
        options:
          - Both
          - Android
          - iOS
        default: Both

env:
  FLUTTER_VERSION: '3.27.2'
  JAVA_VERSION: '17'

jobs:
  # ============================================================================
  # SHARED SETUP JOB - Fast, Cacheable, Shared Dependencies
  # ============================================================================
  shared-setup:
    name: üîß Shared Setup & Validation
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      release_tag: ${{ steps.validation.outputs.release_tag }}
      build_platform: ${{ steps.validation.outputs.build_platform }}
      should_build_android: ${{ steps.validation.outputs.should_build_android }}
      should_build_ios: ${{ steps.validation.outputs.should_build_ios }}
      flutter_cache_key: ${{ steps.cache-keys.outputs.flutter_cache_key }}
      pubspec_hash: ${{ steps.cache-keys.outputs.pubspec_hash }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Validate Inputs & Set Outputs
        id: validation
        run: |
          RELEASE_TAG="${{ inputs.release_tag }}"
          VERIFY_RELEASE_TAG="${{ inputs.verify_release_tag }}"
          PASSWORD="${{ inputs.password }}"
          PLATFORM="${{ inputs.build_platform }}"
          
          echo "üîç Validating inputs..."
          
          # Validate release tags match
          if [[ "$RELEASE_TAG" != "$VERIFY_RELEASE_TAG" ]]; then
            echo "‚ùå ERROR: Release tag and verify release tag do not match"
            exit 1
          fi
          
          # Validate release tag format
          if [[ ! $RELEASE_TAG =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå ERROR: Invalid release tag format. Expected format: x.y.z"
            exit 1
          fi
          
          # Check if tag exists
          if ! git tag -l | grep -q "^$RELEASE_TAG$"; then
            echo "‚ùå ERROR: Tag '$RELEASE_TAG' does not exist"
            exit 1
          fi
          
          # Validate password
          if [[ -z "$PASSWORD" ]] || [[ "$PASSWORD" != "${{ secrets.RELEASE_PASSWORD }}" ]]; then
            echo "‚ùå ERROR: Invalid password"
            exit 1
          fi
          
          echo "‚úÖ Input validation successful"
          
          # Set outputs
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "build_platform=$PLATFORM" >> $GITHUB_OUTPUT
          
          # Set conditional build flags
          if [[ "$PLATFORM" == "Android" || "$PLATFORM" == "Both" ]]; then
            echo "should_build_android=true" >> $GITHUB_OUTPUT
          else
            echo "should_build_android=false" >> $GITHUB_OUTPUT
          fi
          
          if [[ "$PLATFORM" == "iOS" || "$PLATFORM" == "Both" ]]; then
            echo "should_build_ios=true" >> $GITHUB_OUTPUT
          else
            echo "should_build_ios=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate Cache Keys
        id: cache-keys
        run: |
          PUBSPEC_HASH="${{ hashFiles('**/pubspec.lock', '**/pubspec.yaml') }}"
          FLUTTER_CACHE_KEY="flutter-shared-${{ env.FLUTTER_VERSION }}-${PUBSPEC_HASH}"
          
          echo "pubspec_hash=${PUBSPEC_HASH}" >> $GITHUB_OUTPUT
          echo "flutter_cache_key=${FLUTTER_CACHE_KEY}" >> $GITHUB_OUTPUT

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Configure Git for private repos
        run: |
          TOKEN="${{ secrets.PRIVATE_REPO_TOKEN || secrets.GITHUB_TOKEN }}"
          git config --global url."https://x-access-token:${TOKEN}@github.com/".insteadOf "https://github.com/"

      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Cache Flutter Dependencies (Shared)
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.PUB_CACHE }}
            ~/.pub-cache
            .dart_tool
          key: ${{ steps.cache-keys.outputs.flutter_cache_key }}
          restore-keys: |
            flutter-shared-${{ env.FLUTTER_VERSION }}-
            flutter-shared-

      - name: Upload Flutter Dependencies Artifact
        uses: actions/upload-artifact@v4
        with:
          name: flutter-dependencies-${{ steps.validation.outputs.release_tag }}
          path: |
            .dart_tool/
            pubspec.lock
          retention-days: 1

  # ============================================================================
  # ANDROID PREPARATION JOB - Platform-specific setup
  # ============================================================================
  android-preparation:
    name: ü§ñ Android Preparation
    needs: shared-setup
    if: ${{ needs.shared-setup.outputs.should_build_android == 'true' }}
    runs-on: ubuntu-latest
    outputs:
      android_ready: ${{ steps.android-setup.outputs.ready }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Flutter Dependencies
        uses: actions/download-artifact@v4
        with:
          name: flutter-dependencies-${{ needs.shared-setup.outputs.release_tag }}

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Cache Android Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.gradle/daemon
            ~/.android
            android/.gradle
            android/app/.gradle
            ~/.konan
            ~/.kotlin
          key: android-prep-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            android-prep-${{ runner.os }}-

      - name: Android Environment Setup
        id: android-setup
        run: |
          echo "üîß Setting up Android build environment..."
          
          # Create keystore
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/keystore.jks
          chmod 600 android/keystore.jks
          
          # Create key.properties
          cat > android/key.properties << EOF
          storePassword=${{ secrets.ANDROID_STORE_PASSWORD }}
          keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
          keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}
          storeFile=../keystore.jks
          EOF
          
          # Extract version info
          RELEASE_TAG="${{ needs.shared-setup.outputs.release_tag }}"
          VERSION_NAME="$RELEASE_TAG"
          IFS='.' read -ra VERSION_PARTS <<< "$VERSION_NAME"
          VERSION_CODE="$((${VERSION_PARTS[0]} * 10000000 + ${VERSION_PARTS[1]} * 100000 + ${VERSION_PARTS[2]} * 1000))"
          
          # Update local.properties
          cat > android/local.properties << EOF
          flutter.versionName=$VERSION_NAME
          flutter.versionCode=$VERSION_CODE
          flutter.sdk=$FLUTTER_ROOT
          EOF
          
          echo "ready=true" >> $GITHUB_OUTPUT
          echo "‚úÖ Android preparation complete"

      - name: Upload Android Configuration
        uses: actions/upload-artifact@v4
        with:
          name: android-config-${{ needs.shared-setup.outputs.release_tag }}
          path: |
            android/keystore.jks
            android/key.properties
            android/local.properties
          retention-days: 1

  # ============================================================================
  # iOS PREPARATION JOB - Platform-specific setup
  # ============================================================================
  ios-preparation:
    name: üçé iOS Preparation
    needs: shared-setup
    if: ${{ needs.shared-setup.outputs.should_build_ios == 'true' }}
    runs-on: macos-15
    outputs:
      ios_ready: ${{ steps.ios-setup.outputs.ready }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Flutter Dependencies
        uses: actions/download-artifact@v4
        with:
          name: flutter-dependencies-${{ needs.shared-setup.outputs.release_tag }}

      - name: Select Xcode 16.4
        run: |
          sudo xcode-select --switch /Applications/Xcode_16.4.app/Contents/Developer
          xcodebuild -version

      - name: Cache CocoaPods Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ios/Pods
            ~/.cocoapods
            ~/Library/Caches/CocoaPods
            ios/.symlinks
          key: cocoapods-prep-${{ runner.os }}-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            cocoapods-prep-${{ runner.os }}-

      - name: iOS Environment Setup
        id: ios-setup
        env:
          IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE_BASE64 }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
          IOS_SHARE_EXTENSION_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_SHARE_EXTENSION_PROVISIONING_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.IOS_KEYCHAIN_PASSWORD }}
        run: |
          echo "üîß Setting up iOS build environment..."
          
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          MAIN_PROFILE_PATH=$RUNNER_TEMP/main_app.mobileprovision
          SHARE_PROFILE_PATH=$RUNNER_TEMP/share_extension.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # Import certificate and provisioning profiles
          echo -n "$IOS_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$IOS_PROVISIONING_PROFILE_BASE64" | base64 --decode -o $MAIN_PROFILE_PATH
          echo -n "$IOS_SHARE_EXTENSION_PROVISIONING_PROFILE_BASE64" | base64 --decode -o $SHARE_PROFILE_PATH
          
          # Create and setup keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security import $CERTIFICATE_PATH -P "$IOS_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # Install provisioning profiles
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          
          # Extract profile information
          MAIN_PROFILE_UUID=$(security cms -D -i $MAIN_PROFILE_PATH | plutil -extract UUID xml1 -o - -- - | xmllint --xpath "//string/text()" - 2>/dev/null || security cms -D -i $MAIN_PROFILE_PATH | grep -A1 "UUID" | grep string | sed 's/.*<string>\(.*\)<\/string>.*/\1/' | head -1)
          SHARE_PROFILE_UUID=$(security cms -D -i $SHARE_PROFILE_PATH | plutil -extract UUID xml1 -o - -- - | xmllint --xpath "//string/text()" - 2>/dev/null || security cms -D -i $SHARE_PROFILE_PATH | grep -A1 "UUID" | grep string | sed 's/.*<string>\(.*\)<\/string>.*/\1/' | head -1)
          
          # Install profiles
          cp $MAIN_PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles/$MAIN_PROFILE_UUID.mobileprovision
          cp $SHARE_PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles/$SHARE_PROFILE_UUID.mobileprovision
          
          echo "ready=true" >> $GITHUB_OUTPUT
          echo "‚úÖ iOS preparation complete"

      - name: Upload iOS Configuration
        uses: actions/upload-artifact@v4
        with:
          name: ios-config-${{ needs.shared-setup.outputs.release_tag }}
          path: |
            ~/Library/MobileDevice/Provisioning Profiles/
            ios/ExportOptions.plist
          retention-days: 1

  # ============================================================================
  # ANDROID BUILD JOB - Isolated, Heavy Build Process
  # ============================================================================
  android-build:
    name: üèóÔ∏è Android Build
    needs: [shared-setup, android-preparation]
    if: ${{ needs.android-preparation.outputs.android_ready == 'true' }}
    runs-on: ubuntu-latest
    outputs:
      build_success: ${{ steps.build.outputs.success }}
      aab_path: ${{ steps.build.outputs.aab_path }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Dependencies & Config
        uses: actions/download-artifact@v4
        with:
          pattern: "*-${{ needs.shared-setup.outputs.release_tag }}"

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Restore Flutter Dependencies
        run: flutter pub get

      - name: Build Android App Bundle (with retry)
        id: build
        run: |
          echo "üèóÔ∏è Building Android App Bundle..."
          
          # Retry logic for build
          for attempt in 1 2 3; do
            echo "Build attempt $attempt/3"
            
            if flutter build appbundle --release \
              --dart-define=FLUTTER_WEB_AUTO_DETECT=true \
              --split-debug-info=build/android/debug-info \
              --obfuscate; then
              
              echo "success=true" >> $GITHUB_OUTPUT
              echo "aab_path=build/app/outputs/bundle/release/app-release.aab" >> $GITHUB_OUTPUT
              echo "‚úÖ Android build successful on attempt $attempt"
              break
            else
              echo "‚ùå Build attempt $attempt failed"
              if [ $attempt -eq 3 ]; then
                echo "success=false" >> $GITHUB_OUTPUT
                exit 1
              fi
              sleep 30
            fi
          done

      - name: Upload Android App Bundle
        if: steps.build.outputs.success == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: android-aab-${{ needs.shared-setup.outputs.release_tag }}
          path: build/app/outputs/bundle/release/app-release.aab
          retention-days: 30

  # ============================================================================
  # iOS BUILD JOB - Isolated, Heavy Build Process
  # ============================================================================
  ios-build:
    name: üèóÔ∏è iOS Build
    needs: [shared-setup, ios-preparation]
    if: ${{ needs.ios-preparation.outputs.ios_ready == 'true' }}
    runs-on: macos-15
    outputs:
      build_success: ${{ steps.build.outputs.success }}
      ipa_path: ${{ steps.build.outputs.ipa_path }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Dependencies & Config
        uses: actions/download-artifact@v4
        with:
          pattern: "*-${{ needs.shared-setup.outputs.release_tag }}"

      - name: Select Xcode 16.4
        run: |
          sudo xcode-select --switch /Applications/Xcode_16.4.app/Contents/Developer

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Restore Flutter Dependencies
        run: flutter pub get

      - name: Install CocoaPods dependencies
        run: |
          cd ios
          if [ ! -d "Pods" ] || [ ! -f "Pods/Manifest.lock" ]; then
            pod install --repo-update
          else
            pod install
          fi

      - name: Build iOS Archive (with retry)
        id: build
        run: |
          echo "üèóÔ∏è Building iOS Archive..."
          
          RELEASE_TAG="${{ needs.shared-setup.outputs.release_tag }}"
          VERSION="$RELEASE_TAG"
          IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
          BUILD_NUMBER="$((${VERSION_PARTS[0]} * 10000000 + ${VERSION_PARTS[1]} * 100000 + ${VERSION_PARTS[2]} * 1000))"
          
          # Retry logic for build
          for attempt in 1 2 3; do
            echo "Build attempt $attempt/3"
            
            if flutter build ipa --release \
              --export-options-plist=ios/ExportOptions.plist \
              --build-name="$VERSION" \
              --build-number="$BUILD_NUMBER" \
              --dart-define=FLUTTER_WEB_AUTO_DETECT=true \
              --split-debug-info=build/ios/debug-info \
              --obfuscate; then
              
              IPA_FILE=$(ls build/ios/ipa/*.ipa)
              echo "success=true" >> $GITHUB_OUTPUT
              echo "ipa_path=$IPA_FILE" >> $GITHUB_OUTPUT
              echo "‚úÖ iOS build successful on attempt $attempt"
              break
            else
              echo "‚ùå Build attempt $attempt failed"
              if [ $attempt -eq 3 ]; then
                echo "success=false" >> $GITHUB_OUTPUT
                exit 1
              fi
              sleep 30
            fi
          done

      - name: Upload iOS App
        if: steps.build.outputs.success == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ios-ipa-${{ needs.shared-setup.outputs.release_tag }}
          path: build/ios/ipa/*.ipa
          retention-days: 30

  # ============================================================================
  # ANDROID DEPLOYMENT JOB - Retryable, Independent
  # ============================================================================
  android-deploy:
    name: üöÄ Android Deploy
    needs: [shared-setup, android-build]
    if: ${{ needs.android-build.outputs.build_success == 'true' }}
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Android AAB
        uses: actions/download-artifact@v4
        with:
          name: android-aab-${{ needs.shared-setup.outputs.release_tag }}
          path: build/app/outputs/bundle/release/

      - name: Cache Ruby Dependencies
        uses: actions/cache@v4
        with:
          path: |
            android/vendor/bundle
            ~/.gem
            ~/.bundle
          key: ruby-fastlane-${{ runner.os }}-${{ hashFiles('android/Gemfile.lock') }}

      - name: Setup Ruby for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
          working-directory: android

      - name: Setup Google Play Console Service Account
        run: |
          echo "${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}" | base64 --decode > android/play-console-service-account.json
          chmod 600 android/play-console-service-account.json

      - name: Deploy to Google Play Console (with retry)
        run: |
          export AAB_FILE_PATH="$(pwd)/build/app/outputs/bundle/release/app-release.aab"
          cd android
          
          # Retry logic for deployment
          for attempt in 1 2 3; do
            echo "Deployment attempt $attempt/3"
            
            if bundle exec fastlane deploy_internal; then
              echo "‚úÖ Android deployment successful on attempt $attempt"
              break
            else
              echo "‚ùå Deployment attempt $attempt failed"
              if [ $attempt -eq 3 ]; then
                exit 1
              fi
              sleep 60
            fi
          done
        env:
          SUPPLY_JSON_KEY_FILE: play-console-service-account.json

  # ============================================================================
  # iOS DEPLOYMENT JOB - Retryable, Independent
  # ============================================================================
  ios-deploy:
    name: üöÄ iOS Deploy
    needs: [shared-setup, ios-build]
    if: ${{ needs.ios-build.outputs.build_success == 'true' }}
    runs-on: macos-15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download iOS IPA
        uses: actions/download-artifact@v4
        with:
          name: ios-ipa-${{ needs.shared-setup.outputs.release_tag }}
          path: build/ios/ipa/

      - name: Cache Ruby Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ios/vendor/bundle
            ~/.gem
            ~/.bundle
          key: ruby-fastlane-ios-${{ runner.os }}-${{ hashFiles('ios/Gemfile.lock') }}

      - name: Setup Ruby for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
          working-directory: ios

      - name: Deploy to TestFlight (with retry)
        run: |
          IPA_FILES=(build/ios/ipa/*.ipa)
          export IPA_FILE_PATH="$(pwd)/${IPA_FILES[0]}"
          cd ios
          
          # Retry logic for deployment
          for attempt in 1 2 3; do
            echo "Deployment attempt $attempt/3"
            
            if bundle exec fastlane deploy_testflight; then
              echo "‚úÖ iOS deployment successful on attempt $attempt"
              break
            else
              echo "‚ùå Deployment attempt $attempt failed"
              if [ $attempt -eq 3 ]; then
                exit 1
              fi
              sleep 60
            fi
          done
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY }}

  # ============================================================================
  # FINAL SUMMARY JOB
  # ============================================================================
  build-summary:
    name: üìä Build Summary
    needs: [shared-setup, android-build, ios-build, android-deploy, ios-deploy]
    if: always() && needs.shared-setup.result == 'success'
    runs-on: ubuntu-latest
    
    steps:
      - name: Generate Build Summary
        run: |
          echo "## üì¶ Fragmented Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üöÄ Job Status Overview" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Shared Setup
          echo "**üîß Shared Setup**: " >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.shared-setup.result }}" == "success" ]]; then
            echo "‚úÖ Completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Failed" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Android Pipeline
          if [[ "${{ needs.shared-setup.outputs.should_build_android }}" == "true" ]]; then
            echo "**ü§ñ Android Pipeline**:" >> $GITHUB_STEP_SUMMARY
            echo "- Build: ${{ needs.android-build.result == 'success' && '‚úÖ' || '‚ùå' }}" >> $GITHUB_STEP_SUMMARY
            echo "- Deploy: ${{ needs.android-deploy.result == 'success' && '‚úÖ' || '‚ùå' }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "**ü§ñ Android Pipeline**: ‚è≠Ô∏è Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # iOS Pipeline
          if [[ "${{ needs.shared-setup.outputs.should_build_ios }}" == "true" ]]; then
            echo "**üçé iOS Pipeline**:" >> $GITHUB_STEP_SUMMARY
            echo "- Build: ${{ needs.ios-build.result == 'success' && '‚úÖ' || '‚ùå' }}" >> $GITHUB_STEP_SUMMARY
            echo "- Deploy: ${{ needs.ios-deploy.result == 'success' && '‚úÖ' || '‚ùå' }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "**üçé iOS Pipeline**: ‚è≠Ô∏è Skipped" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üìã Build Details" >> $GITHUB_STEP_SUMMARY
          echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Release Tag** | \`${{ needs.shared-setup.outputs.release_tag }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Platform** | \`${{ needs.shared-setup.outputs.build_platform }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Workflow** | Fragmented Architecture |" >> $GITHUB_STEP_SUMMARY
          echo "| **Total Jobs** | 8 (vs 3 in monolithic) |" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéØ Optimization Benefits" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Granular Failure Recovery**: Re-run only failed jobs" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Parallel Execution**: Android & iOS prep/build run in parallel" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Shared Dependencies**: Common setup cached and reused" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Retry Logic**: Automatic retries for build and deployment steps" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ **Artifact Persistence**: Intermediate results saved between jobs" >> $GITHUB_STEP_SUMMARY
