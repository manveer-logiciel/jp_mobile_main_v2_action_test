name: Build Validation

on:
  workflow_call:
    inputs:
      release_tag:
        description: 'Release Tag (e.g., 3.37.2)'
        required: true
        type: string
      verify_release_tag:
        description: 'Verify Release Tag (must match above)'
        required: true
        type: string
      password:
        description: 'Password for secure operations'
        required: true
        type: string
      build_platform:
        description: 'Select build platform'
        required: true
        type: string
    outputs:
      release_tag:
        description: "Validated release tag"
        value: ${{ jobs.validate.outputs.release_tag }}
      build_platform:
        description: "Build platform"
        value: ${{ jobs.validate.outputs.build_platform }}
      should_build_android:
        description: "Whether to build Android"
        value: ${{ jobs.validate.outputs.should_build_android }}
      should_build_ios:
        description: "Whether to build iOS"
        value: ${{ jobs.validate.outputs.should_build_ios }}

jobs:
  validate:
    name: Validate Build Parameters
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      release_tag: ${{ steps.validation.outputs.release_tag }}
      build_platform: ${{ steps.validation.outputs.build_platform }}
      should_build_android: ${{ steps.validation.outputs.should_build_android }}
      should_build_ios: ${{ steps.validation.outputs.should_build_ios }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Fetch all history and tags
      
      - name: Validate Inputs & Set Outputs
        id: validation
        run: |
          RELEASE_TAG="${{ inputs.release_tag }}"
          VERIFY_RELEASE_TAG="${{ inputs.verify_release_tag }}"
          PASSWORD="${{ inputs.password }}"
          PLATFORM="${{ inputs.build_platform }}"
          
          echo "🔍 Validating inputs..."
          echo "🏷️ Release Tag: $RELEASE_TAG"
          echo "🔐 Password: [REDACTED]"
          echo "🏗️ Platform: $PLATFORM"
          
          # Validate release tags match
          if [[ "$RELEASE_TAG" != "$VERIFY_RELEASE_TAG" ]]; then
            echo "❌ ERROR: Release tag and verify release tag do not match"
            echo "Release Tag: '$RELEASE_TAG'"
            echo "Verify Release Tag: '$VERIFY_RELEASE_TAG'"
            exit 1
          fi
          
          # Validate release tag format (semantic version without 'v' prefix)
          if [[ ! $RELEASE_TAG =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ ERROR: Invalid release tag format. Expected format: x.y.z (e.g., 3.37.2)"
            exit 1
          fi
          
          # Check if the tag exists in the repository
          echo "🔍 Checking if tag '$RELEASE_TAG' exists..."
          if ! git tag -l | grep -q "^$RELEASE_TAG$"; then
            echo "❌ ERROR: Tag '$RELEASE_TAG' does not exist in the repository"
            echo "Available tags:"
            git tag -l | sort -V | tail -10
            echo ""
            echo "Please create the tag first using:"
            echo "  git tag $RELEASE_TAG"
            echo "  git push origin $RELEASE_TAG"
            exit 1
          fi
          
          echo "✅ Tag '$RELEASE_TAG' exists in the repository"
          
          # Validate password is provided and not empty
          if [[ -z "$PASSWORD" ]]; then
            echo "❌ ERROR: Password input is required"
            exit 1
          fi
          
          # Validate password against the stored secret
          STORED_PASSWORD="${{ secrets.RELEASE_PASSWORD }}"
          if [[ -z "$STORED_PASSWORD" ]]; then
            echo "❌ ERROR: RELEASE_PASSWORD secret is not configured"
            echo "Please set the RELEASE_PASSWORD secret in repository settings"
            exit 1
          fi
          
          if [[ "$PASSWORD" != "$STORED_PASSWORD" ]]; then
            echo "❌ ERROR: Invalid password provided"
            echo "The password does not match the stored RELEASE_PASSWORD secret"
            exit 1
          fi
          
          echo "🔐 Password verified successfully against stored secret"
          
          echo "✅ Input validation successful"
          
          # Set outputs for next steps
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "build_platform=$PLATFORM" >> $GITHUB_OUTPUT
          
          # Set conditional build flags
          if [[ "$PLATFORM" == "Android" || "$PLATFORM" == "Both" ]]; then
            echo "should_build_android=true" >> $GITHUB_OUTPUT
          else
            echo "should_build_android=false" >> $GITHUB_OUTPUT
          fi
          
          if [[ "$PLATFORM" == "iOS" || "$PLATFORM" == "Both" ]]; then
            echo "should_build_ios=true" >> $GITHUB_OUTPUT
          else
            echo "should_build_ios=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Validation Complete
        run: |
          echo "::notice title=Validation Complete::✅ Build validation completed successfully"
