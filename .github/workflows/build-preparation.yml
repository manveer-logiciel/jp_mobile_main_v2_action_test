name: Mobile App Build Pipeline (Sharded)

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release Tag (e.g., 3.37.2)'
        required: true
        type: string
      verify_release_tag:
        description: 'Verify Release Tag (must match above)'
        required: true
        type: string
      password:
        description: 'Password for secure operations'
        required: true
        type: string
      build_platform:
        description: 'Select build platform'
        required: true
        type: choice
        options:
          - Both
          - Android
          - iOS
        default: Both

env:
  FLUTTER_VERSION: '3.27.2'
  JAVA_VERSION: '17'

jobs:
  # ===========================
  # SHARED PREPARATION PHASE
  # ===========================
  
  validate-inputs:
    name: üîç Validate Inputs
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      release_tag: ${{ steps.validation.outputs.release_tag }}
      build_platform: ${{ steps.validation.outputs.build_platform }}
      should_build_android: ${{ steps.validation.outputs.should_build_android }}
      should_build_ios: ${{ steps.validation.outputs.should_build_ios }}
      version_code: ${{ steps.validation.outputs.version_code }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
      
      - name: Validate Inputs & Set Outputs
        id: validation
        run: |
          RELEASE_TAG="${{ inputs.release_tag }}"
          VERIFY_RELEASE_TAG="${{ inputs.verify_release_tag }}"
          PASSWORD="${{ inputs.password }}"
          PLATFORM="${{ inputs.build_platform }}"
          
          echo "üîç Validating inputs..."
          echo "üè∑Ô∏è Release Tag: $RELEASE_TAG"
          echo "üîê Password: [REDACTED]"
          echo "üèóÔ∏è Platform: $PLATFORM"
          
          # Validate release tags match
          if [[ "$RELEASE_TAG" != "$VERIFY_RELEASE_TAG" ]]; then
            echo "‚ùå ERROR: Release tag and verify release tag do not match"
            echo "Release Tag: '$RELEASE_TAG'"
            echo "Verify Release Tag: '$VERIFY_RELEASE_TAG'"
            exit 1
          fi
          
          # Validate release tag format (semantic version without 'v' prefix)
          if [[ ! $RELEASE_TAG =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå ERROR: Invalid release tag format. Expected format: x.y.z (e.g., 3.37.2)"
            exit 1
          fi
          
          # Check if the tag exists in the repository
          echo "üîç Checking if tag '$RELEASE_TAG' exists..."
          if ! git tag -l | grep -q "^$RELEASE_TAG$"; then
            echo "‚ùå ERROR: Tag '$RELEASE_TAG' does not exist in the repository"
            echo "Available tags:"
            git tag -l | sort -V | tail -10
            echo ""
            echo "Please create the tag first using:"
            echo "  git tag $RELEASE_TAG"
            echo "  git push origin $RELEASE_TAG"
            exit 1
          fi
          
          echo "‚úÖ Tag '$RELEASE_TAG' exists in the repository"
          
          # Validate password is provided and not empty
          if [[ -z "$PASSWORD" ]]; then
            echo "‚ùå ERROR: Password input is required"
            exit 1
          fi
          
          # Validate password against the stored secret
          STORED_PASSWORD="${{ secrets.RELEASE_PASSWORD }}"
          if [[ -z "$STORED_PASSWORD" ]]; then
            echo "‚ùå ERROR: RELEASE_PASSWORD secret is not configured"
            echo "Please set the RELEASE_PASSWORD secret in repository settings"
            exit 1
          fi
          
          if [[ "$PASSWORD" != "$STORED_PASSWORD" ]]; then
            echo "‚ùå ERROR: Invalid password provided"
            echo "The password does not match the stored RELEASE_PASSWORD secret"
            exit 1
          fi
          
          echo "üîê Password verified successfully against stored secret"
          echo "‚úÖ Input validation successful"
          
          # Calculate version code once for reuse with build number for uniqueness
          IFS='.' read -ra VERSION_PARTS <<< "$RELEASE_TAG"
          BASE_VERSION_CODE="$((${VERSION_PARTS[0]} * 10000000 + ${VERSION_PARTS[1]} * 100000 + ${VERSION_PARTS[2]} * 1000))"
          # Add GitHub run number to ensure uniqueness for TestFlight uploads
          VERSION_CODE="$((BASE_VERSION_CODE + ${{ github.run_number }}))"
          
          echo "üìä Version calculation:"
          echo "  Base version: $BASE_VERSION_CODE (from $RELEASE_TAG)"
          echo "  GitHub run number: ${{ github.run_number }}"
          echo "  Final version code: $VERSION_CODE"
          
          # Set outputs for next steps
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "build_platform=$PLATFORM" >> $GITHUB_OUTPUT
          echo "version_code=$VERSION_CODE" >> $GITHUB_OUTPUT
          
          # Set conditional build flags
          if [[ "$PLATFORM" == "Android" || "$PLATFORM" == "Both" ]]; then
            echo "should_build_android=true" >> $GITHUB_OUTPUT
          else
            echo "should_build_android=false" >> $GITHUB_OUTPUT
          fi
          
          if [[ "$PLATFORM" == "iOS" || "$PLATFORM" == "Both" ]]; then
            echo "should_build_ios=true" >> $GITHUB_OUTPUT
          else
            echo "should_build_ios=false" >> $GITHUB_OUTPUT
          fi

  shared-flutter-setup:
    name: üöÄ Setup Flutter Environment
    needs: validate-inputs
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      flutter-cache-key: ${{ steps.flutter-cache.outputs.cache-hit }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PRIVATE_REPO_TOKEN || secrets.GITHUB_TOKEN }}
          ref: main
      
      - name: Configure Git for private repos
        run: |
          TOKEN="${{ secrets.PRIVATE_REPO_TOKEN || secrets.GITHUB_TOKEN }}"
          git config --global url."https://x-access-token:${TOKEN}@github.com/".insteadOf "https://github.com/"
      
      - name: Cache Flutter Dependencies
        id: flutter-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: flutter-shared-${{ env.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.lock', '**/pubspec.yaml') }}-v2
          restore-keys: |
            flutter-shared-${{ env.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.lock') }}-
            flutter-shared-${{ env.FLUTTER_VERSION }}-
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
      
      - name: Get Flutter dependencies
        run: flutter pub get
      
      - name: Flutter doctor
        run: flutter doctor -v

  # ===========================
  # ANDROID BUILD FRAGMENTS
  # ===========================
  
  android-setup:
    name: ü§ñ Android Environment Setup
    needs: [validate-inputs, shared-flutter-setup]
    if: ${{ needs.validate-inputs.outputs.should_build_android == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      android-cache-key: ${{ steps.android-cache.outputs.cache-hit }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PRIVATE_REPO_TOKEN || secrets.GITHUB_TOKEN }}
          ref: main
      
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
      
      - name: Cache Android Dependencies & Build
        id: android-cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.gradle/daemon
            ~/.android
            android/.gradle
            android/app/.gradle
            android/build
            ~/.konan
            ~/.kotlin
            /home/runner/.gradle/caches/transforms-*
            /home/runner/.gradle/caches/build-cache-*
          key: android-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', '**/*.kt') }}-v3
          restore-keys: |
            android-${{ runner.os }}-${{ hashFiles('**/*.gradle*') }}-
            android-${{ runner.os }}-
      
      - name: Configure Android Build Environment
        run: |
          # Create keystore
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/keystore.jks
          chmod 600 android/keystore.jks
          
          # Create key.properties
          cat > android/key.properties << EOF
          storePassword=${{ secrets.ANDROID_STORE_PASSWORD }}
          keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
          keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}
          storeFile=../keystore.jks
          EOF
          
          # Update local.properties
          cat > android/local.properties << EOF
          flutter.versionName=${{ needs.validate-inputs.outputs.release_tag }}
          flutter.versionCode=${{ needs.validate-inputs.outputs.version_code }}
          flutter.sdk=$FLUTTER_ROOT
          EOF
          
          echo "‚úÖ Android build environment configured"

  android-build:
    name: üèóÔ∏è Android App Bundle Build
    needs: [validate-inputs, shared-flutter-setup, android-setup]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      bundle-path: ${{ steps.build.outputs.bundle-path }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PRIVATE_REPO_TOKEN || secrets.GITHUB_TOKEN }}
          ref: main
      
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
      
      - name: Restore Flutter Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: flutter-shared-${{ env.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.lock', '**/pubspec.yaml') }}-v2
          restore-keys: |
            flutter-shared-${{ env.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.lock') }}-
            flutter-shared-${{ env.FLUTTER_VERSION }}-
      
      - name: Restore Android Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.gradle/daemon
            ~/.android
            android/.gradle
            android/app/.gradle
            android/build
            ~/.konan
            ~/.kotlin
            /home/runner/.gradle/caches/transforms-*
            /home/runner/.gradle/caches/build-cache-*
          key: android-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', '**/*.kt') }}-v3
          restore-keys: |
            android-${{ runner.os }}-${{ hashFiles('**/*.gradle*') }}-
            android-${{ runner.os }}-
      
      - name: Configure Android Build Environment
        run: |
          # Recreate keystore and configuration files directly from secrets
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/keystore.jks
          chmod 600 android/keystore.jks
          
          # Create key.properties
          cat > android/key.properties << EOF
          storePassword=${{ secrets.ANDROID_STORE_PASSWORD }}
          keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
          keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}
          storeFile=../keystore.jks
          EOF
          
          # Update local.properties
          cat > android/local.properties << EOF
          flutter.versionName=${{ needs.validate-inputs.outputs.release_tag }}
          flutter.versionCode=${{ needs.validate-inputs.outputs.version_code }}
          flutter.sdk=$FLUTTER_ROOT
          EOF
          
          echo "‚úÖ Android build environment configured directly from secrets"
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
      
      - name: Configure Git for private repos
        run: |
          TOKEN="${{ secrets.PRIVATE_REPO_TOKEN || secrets.GITHUB_TOKEN }}"
          git config --global url."https://x-access-token:${TOKEN}@github.com/".insteadOf "https://github.com/"
      
      - name: Get Flutter dependencies
        run: flutter pub get
      
      - name: Build App Bundle
        id: build
        run: |
          echo "::notice title=Android Build::üèóÔ∏è Building release app bundle..."
          flutter build appbundle --release \
            --dart-define=FLUTTER_WEB_AUTO_DETECT=true \
            --split-debug-info=build/android/debug-info \
            --obfuscate
          
          BUNDLE_PATH="build/app/outputs/bundle/release/app-release.aab"
          echo "bundle-path=$BUNDLE_PATH" >> $GITHUB_OUTPUT
          echo "::notice title=Android Build::‚úÖ App bundle created successfully"
          
          # Verify bundle was created
          if [ ! -f "$BUNDLE_PATH" ]; then
            echo "‚ùå ERROR: App bundle was not created"
            exit 1
          fi
          
          echo "üì¶ Bundle size: $(du -h $BUNDLE_PATH | cut -f1)"
      
      - name: Upload App Bundle Artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-app-bundle-${{ needs.validate-inputs.outputs.release_tag }}
          path: build/app/outputs/bundle/release/app-release.aab
          retention-days: 30

  android-deploy:
    name: üöÄ Android Deployment to Play Console
    needs: [validate-inputs, android-build]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PRIVATE_REPO_TOKEN || secrets.GITHUB_TOKEN }}
          ref: main
      
      - name: Download App Bundle
        uses: actions/download-artifact@v4
        with:
          name: android-app-bundle-${{ needs.validate-inputs.outputs.release_tag }}
          path: build/app/outputs/bundle/release/
      
      - name: Cache Ruby Dependencies & Fastlane
        uses: actions/cache@v4
        with:
          path: |
            android/vendor/bundle
            ~/.gem
            ~/.bundle
            android/.bundle
          key: ruby-fastlane-${{ runner.os }}-${{ hashFiles('android/Gemfile', 'android/Gemfile.lock') }}-v2
          restore-keys: |
            ruby-fastlane-${{ runner.os }}-${{ hashFiles('android/Gemfile') }}-
            ruby-fastlane-${{ runner.os }}-
      
      - name: Setup Ruby for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
          working-directory: android
      
      - name: Setup Google Play Console Service Account
        run: |
          echo "${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}" | base64 --decode > android/play-console-service-account.json
          chmod 600 android/play-console-service-account.json
      
      - name: Deploy to Google Play Console Internal Testing
        run: |
          export AAB_FILE_PATH="$(pwd)/build/app/outputs/bundle/release/app-release.aab"
          cd android
          bundle exec fastlane deploy_internal
        env:
          SUPPLY_JSON_KEY_FILE: play-console-service-account.json
      
      - name: Android Build Summary
        run: |
          echo "## ü§ñ Android Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Release Tag** | \`${{ needs.validate-inputs.outputs.release_tag }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Bundle Size** | \`$(du -h build/app/outputs/bundle/release/app-release.aab | cut -f1)\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîß Build Environment" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Version |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Flutter** | \`${{ env.FLUTTER_VERSION }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Java** | \`${{ env.JAVA_VERSION }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Runner OS** | \`${{ runner.os }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **App Bundle deployed to Google Play Console Internal Testing**" >> $GITHUB_STEP_SUMMARY

  # ===========================
  # iOS BUILD FRAGMENTS
  # ===========================
  
  ios-setup:
    name: üì± iOS Environment Setup
    needs: [validate-inputs, shared-flutter-setup]
    if: ${{ needs.validate-inputs.outputs.should_build_ios == 'true' }}
    runs-on: macos-15
    permissions:
      contents: read
    outputs:
      cocoapods-cache-key: ${{ steps.cocoapods-cache.outputs.cache-hit }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PRIVATE_REPO_TOKEN || secrets.GITHUB_TOKEN }}
          ref: main
      
      - name: Select Xcode 16.4
        run: |
          sudo xcode-select --switch /Applications/Xcode_16.4.app/Contents/Developer
          xcodebuild -version
          echo "Selected Xcode version:"
          xcode-select -p
      
      - name: Cache Flutter Dependencies for iOS
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            ~/Library/Caches/dart-pub
            .dart_tool
          key: flutter-macOS-${{ env.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.lock', '**/pubspec.yaml') }}-ios-v2
          restore-keys: |
            flutter-macOS-${{ env.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.lock') }}-
            flutter-macOS-${{ env.FLUTTER_VERSION }}-
            flutter-macOS-
      
      - name: Cache CocoaPods & iOS Build
        id: cocoapods-cache
        uses: actions/cache@v4
        with:
          path: |
            ios/Pods
            ~/.cocoapods
            ~/Library/Caches/CocoaPods
            ios/build
            ios/.symlinks
          key: cocoapods-${{ runner.os }}-${{ hashFiles('**/Podfile.lock', 'ios/Runner.xcodeproj/project.pbxproj') }}-v3
          restore-keys: |
            cocoapods-${{ runner.os }}-${{ hashFiles('**/Podfile.lock') }}-
            cocoapods-${{ runner.os }}-
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
      
      - name: Configure Git for private repos
        run: |
          TOKEN="${{ secrets.PRIVATE_REPO_TOKEN || secrets.GITHUB_TOKEN }}"
          git config --global url."https://x-access-token:${TOKEN}@github.com/".insteadOf "https://github.com/"
      
      - name: Get Flutter dependencies
        run: flutter pub get
      
      - name: Install CocoaPods dependencies
        run: |
          echo "::notice title=iOS Setup::üì¶ Installing CocoaPods dependencies..."
          cd ios
          # Only run repo update if cache miss or force update needed
          if [ ! -d "Pods" ] || [ ! -f "Pods/Manifest.lock" ]; then
            pod install --repo-update
          else
            pod install
          fi
          echo "::notice title=iOS Setup::‚úÖ CocoaPods dependencies installed"

  ios-build:
    name: üèóÔ∏è iOS IPA Build
    needs: [validate-inputs, ios-setup]
    runs-on: macos-15
    permissions:
      contents: read
    outputs:
      ipa-path: ${{ steps.build.outputs.ipa-path }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PRIVATE_REPO_TOKEN || secrets.GITHUB_TOKEN }}
          ref: main
      
      - name: Select Xcode 16.4
        run: |
          sudo xcode-select --switch /Applications/Xcode_16.4.app/Contents/Developer
          xcodebuild -version
      
      - name: Setup iOS Code Signing (Direct from Secrets)
        env:
          IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE_BASE64 }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
          IOS_SHARE_EXTENSION_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_SHARE_EXTENSION_PROVISIONING_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.IOS_KEYCHAIN_PASSWORD }}
        run: |
          echo "üîê Setting up iOS code signing directly from secrets..."
          
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          MAIN_PROFILE_PATH=$RUNNER_TEMP/main_app.mobileprovision
          SHARE_PROFILE_PATH=$RUNNER_TEMP/share_extension.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # Import certificate and provisioning profiles from secrets
          echo -n "$IOS_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$IOS_PROVISIONING_PROFILE_BASE64" | base64 --decode -o $MAIN_PROFILE_PATH
          echo -n "$IOS_SHARE_EXTENSION_PROVISIONING_PROFILE_BASE64" | base64 --decode -o $SHARE_PROFILE_PATH
          
          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$IOS_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # Install provisioning profiles
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          
          # Extract profile information
          MAIN_PROFILE_UUID=$(security cms -D -i $MAIN_PROFILE_PATH | plutil -extract UUID xml1 -o - -- - | xmllint --xpath "//string/text()" - 2>/dev/null || security cms -D -i $MAIN_PROFILE_PATH | grep -A1 "UUID" | grep string | sed 's/.*<string>\(.*\)<\/string>.*/\1/' | head -1)
          SHARE_PROFILE_UUID=$(security cms -D -i $SHARE_PROFILE_PATH | plutil -extract UUID xml1 -o - -- - | xmllint --xpath "//string/text()" - 2>/dev/null || security cms -D -i $SHARE_PROFILE_PATH | grep -A1 "UUID" | grep string | sed 's/.*<string>\(.*\)<\/string>.*/\1/' | head -1)
          
          # Install profiles
          cp $MAIN_PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles/$MAIN_PROFILE_UUID.mobileprovision
          cp $SHARE_PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles/$SHARE_PROFILE_UUID.mobileprovision
          
          echo "‚úÖ iOS code signing configured directly from secrets (no artifacts created)"
      
      - name: Restore Flutter Cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            ~/Library/Caches/dart-pub
            .dart_tool
          key: flutter-macOS-${{ env.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.lock', '**/pubspec.yaml') }}-ios-v2
          restore-keys: |
            flutter-macOS-${{ env.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.lock') }}-
            flutter-macOS-${{ env.FLUTTER_VERSION }}-
      
      - name: Restore CocoaPods Cache
        uses: actions/cache@v4
        with:
          path: |
            ios/Pods
            ~/.cocoapods
            ~/Library/Caches/CocoaPods
            ios/build
            ios/.symlinks
          key: cocoapods-${{ runner.os }}-${{ hashFiles('**/Podfile.lock', 'ios/Runner.xcodeproj/project.pbxproj') }}-v3
          restore-keys: |
            cocoapods-${{ runner.os }}-${{ hashFiles('**/Podfile.lock') }}-
            cocoapods-${{ runner.os }}-
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
      
      - name: Configure Git for private repos
        run: |
          TOKEN="${{ secrets.PRIVATE_REPO_TOKEN || secrets.GITHUB_TOKEN }}"
          git config --global url."https://x-access-token:${TOKEN}@github.com/".insteadOf "https://github.com/"
      
      - name: Get Flutter dependencies
        run: flutter pub get
      
      - name: Configure Xcode Project for Manual Signing & Provisioning Profiles
        run: |
          echo "üîß Configuring Xcode project for manual signing..."
          
          # Function to safely set plist value (add if doesn't exist, set if exists)
          safe_pbxproj_set() {
            local target_id="$1"
            local key="$2"
            local value="$3"
            
            if /usr/libexec/PlistBuddy -c "Print :objects:$target_id:buildSettings:$key" ios/Runner.xcodeproj/project.pbxproj >/dev/null 2>&1; then
              /usr/libexec/PlistBuddy -c "Set :objects:$target_id:buildSettings:$key $value" ios/Runner.xcodeproj/project.pbxproj
            else
              /usr/libexec/PlistBuddy -c "Add :objects:$target_id:buildSettings:$key string $value" ios/Runner.xcodeproj/project.pbxproj
            fi
          }
          
          # Configure main app (Runner target) - Debug, Release, Profile
          echo "üì± Configuring main app signing..."
          safe_pbxproj_set "97C147061CF9000F007C117D" "CODE_SIGN_STYLE" "Manual"
          safe_pbxproj_set "97C147071CF9000F007C117D" "CODE_SIGN_STYLE" "Manual"
          safe_pbxproj_set "249021D4217E4FDB00AE95B9" "CODE_SIGN_STYLE" "Manual"
          
          safe_pbxproj_set "97C147061CF9000F007C117D" "CODE_SIGN_IDENTITY" "Apple Distribution"
          safe_pbxproj_set "97C147071CF9000F007C117D" "CODE_SIGN_IDENTITY" "Apple Distribution"
          safe_pbxproj_set "249021D4217E4FDB00AE95B9" "CODE_SIGN_IDENTITY" "Apple Distribution"
          
          # Configure Share Extension target - Debug, Release, Profile
          echo "üì± Configuring Share Extension signing..."
          safe_pbxproj_set "E2B11C5528B6384500902FF7" "CODE_SIGN_STYLE" "Manual"
          safe_pbxproj_set "E2B11C5628B6384500902FF7" "CODE_SIGN_STYLE" "Manual"
          safe_pbxproj_set "E2B11C5728B6384500902FF7" "CODE_SIGN_STYLE" "Manual"
          
          safe_pbxproj_set "E2B11C5528B6384500902FF7" "CODE_SIGN_IDENTITY" "Apple Distribution"
          safe_pbxproj_set "E2B11C5628B6384500902FF7" "CODE_SIGN_IDENTITY" "Apple Distribution"
          safe_pbxproj_set "E2B11C5728B6384500902FF7" "CODE_SIGN_IDENTITY" "Apple Distribution"
          
          echo "‚úÖ Xcode project configured for manual signing (both main app and Share Extension)"
      
      - name: Configure Provisioning Profile UUIDs and ExportOptions
        env:
          IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE_BASE64 }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
          IOS_SHARE_EXTENSION_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_SHARE_EXTENSION_PROVISIONING_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.IOS_KEYCHAIN_PASSWORD }}
        run: |
          echo "üîß Setting provisioning profile UUIDs and updating ExportOptions..."
          
          # Recreate signing artifacts for this job
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          MAIN_PROFILE_PATH=$RUNNER_TEMP/main_app.mobileprovision
          SHARE_PROFILE_PATH=$RUNNER_TEMP/share_extension.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # Import certificate and provisioning profiles from secrets
          echo -n "$IOS_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$IOS_PROVISIONING_PROFILE_BASE64" | base64 --decode -o $MAIN_PROFILE_PATH
          echo -n "$IOS_SHARE_EXTENSION_PROVISIONING_PROFILE_BASE64" | base64 --decode -o $SHARE_PROFILE_PATH
          
          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$IOS_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # Extract profile information
          MAIN_PROFILE_UUID=$(security cms -D -i $MAIN_PROFILE_PATH | plutil -extract UUID xml1 -o - -- - | xmllint --xpath "//string/text()" - 2>/dev/null || security cms -D -i $MAIN_PROFILE_PATH | grep -A1 "UUID" | grep string | sed 's/.*<string>\(.*\)<\/string>.*/\1/' | head -1)
          SHARE_PROFILE_UUID=$(security cms -D -i $SHARE_PROFILE_PATH | plutil -extract UUID xml1 -o - -- - | xmllint --xpath "//string/text()" - 2>/dev/null || security cms -D -i $SHARE_PROFILE_PATH | grep -A1 "UUID" | grep string | sed 's/.*<string>\(.*\)<\/string>.*/\1/' | head -1)
          MAIN_PROFILE_NAME=$(security cms -D -i $MAIN_PROFILE_PATH | plutil -extract Name xml1 -o - -- - | xmllint --xpath "//string/text()" - 2>/dev/null || security cms -D -i $MAIN_PROFILE_PATH | grep -A1 "Name" | grep string | sed 's/.*<string>\(.*\)<\/string>.*/\1/' | head -1)
          SHARE_PROFILE_NAME=$(security cms -D -i $SHARE_PROFILE_PATH | plutil -extract Name xml1 -o - -- - | xmllint --xpath "//string/text()" - 2>/dev/null || security cms -D -i $SHARE_PROFILE_PATH | grep -A1 "Name" | grep string | sed 's/.*<string>\(.*\)<\/string>.*/\1/' | head -1)
          
          # Validate extracted values
          if [[ -z "$MAIN_PROFILE_UUID" ]] || [[ -z "$MAIN_PROFILE_NAME" ]] || [[ -z "$SHARE_PROFILE_UUID" ]] || [[ -z "$SHARE_PROFILE_NAME" ]]; then
            echo "‚ùå ERROR: Failed to extract provisioning profile information"
            echo "Main profile UUID: '$MAIN_PROFILE_UUID'"
            echo "Share profile UUID: '$SHARE_PROFILE_UUID'"
            exit 1
          fi
          
          echo "üìã Main app profile UUID: $MAIN_PROFILE_UUID"
          echo "üìã Main app profile Name: $MAIN_PROFILE_NAME"
          echo "üìã Share extension profile UUID: $SHARE_PROFILE_UUID"
          echo "üìã Share extension profile Name: $SHARE_PROFILE_NAME"
          
          # Install provisioning profiles in the correct location
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $MAIN_PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles/$MAIN_PROFILE_UUID.mobileprovision
          cp $SHARE_PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles/$SHARE_PROFILE_UUID.mobileprovision
          
          echo "‚úÖ Provisioning profiles installed to ~/Library/MobileDevice/Provisioning Profiles/"
          ls -la ~/Library/MobileDevice/Provisioning\ Profiles/
          
          # Function to safely set plist value (add if doesn't exist, set if exists)
          safe_pbxproj_set() {
            local target_id="$1"
            local key="$2"
            local value="$3"
            
            if /usr/libexec/PlistBuddy -c "Print :objects:$target_id:buildSettings:$key" ios/Runner.xcodeproj/project.pbxproj >/dev/null 2>&1; then
              /usr/libexec/PlistBuddy -c "Set :objects:$target_id:buildSettings:$key $value" ios/Runner.xcodeproj/project.pbxproj
            else
              /usr/libexec/PlistBuddy -c "Add :objects:$target_id:buildSettings:$key string $value" ios/Runner.xcodeproj/project.pbxproj
            fi
          }
          
          # Set provisioning profile names for main app (Runner target) - Debug, Release, Profile
          echo "üì± Setting main app provisioning profile names..."
          safe_pbxproj_set "97C147061CF9000F007C117D" "PROVISIONING_PROFILE_SPECIFIER" "$MAIN_PROFILE_NAME"
          safe_pbxproj_set "97C147071CF9000F007C117D" "PROVISIONING_PROFILE_SPECIFIER" "$MAIN_PROFILE_NAME"
          safe_pbxproj_set "249021D4217E4FDB00AE95B9" "PROVISIONING_PROFILE_SPECIFIER" "$MAIN_PROFILE_NAME"
          
          # Set development team for main app
          safe_pbxproj_set "97C147061CF9000F007C117D" "DEVELOPMENT_TEAM" "${{ secrets.APPLE_TEAM_ID }}"
          safe_pbxproj_set "97C147071CF9000F007C117D" "DEVELOPMENT_TEAM" "${{ secrets.APPLE_TEAM_ID }}"
          safe_pbxproj_set "249021D4217E4FDB00AE95B9" "DEVELOPMENT_TEAM" "${{ secrets.APPLE_TEAM_ID }}"
          
          # Set provisioning profile names for Share Extension target - Debug, Release, Profile
          echo "üì± Setting Share Extension provisioning profile names..."
          safe_pbxproj_set "E2B11C5528B6384500902FF7" "PROVISIONING_PROFILE_SPECIFIER" "$SHARE_PROFILE_NAME"
          safe_pbxproj_set "E2B11C5628B6384500902FF7" "PROVISIONING_PROFILE_SPECIFIER" "$SHARE_PROFILE_NAME"
          safe_pbxproj_set "E2B11C5728B6384500902FF7" "PROVISIONING_PROFILE_SPECIFIER" "$SHARE_PROFILE_NAME"
          
          # Set development team for Share Extension
          safe_pbxproj_set "E2B11C5528B6384500902FF7" "DEVELOPMENT_TEAM" "${{ secrets.APPLE_TEAM_ID }}"
          safe_pbxproj_set "E2B11C5628B6384500902FF7" "DEVELOPMENT_TEAM" "${{ secrets.APPLE_TEAM_ID }}"
          safe_pbxproj_set "E2B11C5728B6384500902FF7" "DEVELOPMENT_TEAM" "${{ secrets.APPLE_TEAM_ID }}"
          
          # Update ExportOptions.plist
          cp ios/ExportOptions.plist ios/ExportOptions.plist.backup
          
          # Function to safely update plist values
          safe_plist_update() {
            local key="$1"
            local value="$2"
            if ! /usr/libexec/PlistBuddy -c "Set :provisioningProfiles:$key \"$value\"" ios/ExportOptions.plist 2>/dev/null; then
              /usr/libexec/PlistBuddy -c "Add :provisioningProfiles:$key string \"$value\"" ios/ExportOptions.plist 2>/dev/null || return 1
            fi
          }
          
          # Update provisioning profiles in ExportOptions.plist
          safe_plist_update "${{ secrets.IOS_BUNDLE_ID }}" "$MAIN_PROFILE_NAME"
          safe_plist_update "${{ secrets.IOS_SHARE_EXTENSION_BUNDLE_ID }}" "$SHARE_PROFILE_NAME"
          
          # Basic bundle ID validation
          MAIN_BUNDLE_ID_FULL=$(security cms -D -i $MAIN_PROFILE_PATH | grep -A1 "application-identifier" | grep string | sed 's/.*<string>\(.*\)<\/string>.*/\1/' | head -1)
          MAIN_BUNDLE_ID=$(echo "$MAIN_BUNDLE_ID_FULL" | sed 's/^[^.]*\.//')
          
          if [[ "$MAIN_BUNDLE_ID" != "${{ secrets.IOS_BUNDLE_ID }}" ]]; then
            echo "‚ùå ERROR: Bundle ID mismatch. Expected: ${{ secrets.IOS_BUNDLE_ID }}, Found: $MAIN_BUNDLE_ID"
            exit 1
          fi
          
          echo "‚úÖ Provisioning profiles configured for both main app and Share Extension"
          echo "‚úÖ ExportOptions.plist updated with correct provisioning profile names"
      
      - name: Update iOS Version
        run: |
          # Update version information
          RELEASE_TAG="${{ needs.validate-inputs.outputs.release_tag }}"
          VERSION_CODE="${{ needs.validate-inputs.outputs.version_code }}"
          
          echo "üìù Updating iOS version to $RELEASE_TAG ($VERSION_CODE)"
          
          # Function to safely set plist value
          safe_plist_set() {
            local plist_file="$1"
            local key="$2"
            local value="$3"
            
            if /usr/libexec/PlistBuddy -c "Print :$key" "$plist_file" >/dev/null 2>&1; then
              /usr/libexec/PlistBuddy -c "Set :$key $value" "$plist_file"
            else
              /usr/libexec/PlistBuddy -c "Add :$key string $value" "$plist_file"
            fi
          }
          
          # Update Info.plist for main app
          safe_plist_set "ios/Runner/Info.plist" "CFBundleShortVersionString" "$RELEASE_TAG"
          safe_plist_set "ios/Runner/Info.plist" "CFBundleVersion" "$VERSION_CODE"
          
          # Update Info.plist for share extension
          safe_plist_set "ios/Share Extension/Info.plist" "CFBundleShortVersionString" "$RELEASE_TAG"
          safe_plist_set "ios/Share Extension/Info.plist" "CFBundleVersion" "$VERSION_CODE"
          
          echo "‚úÖ iOS version updated successfully"
      
      - name: Build iOS Archive
        id: build
        run: |
          RELEASE_TAG="${{ needs.validate-inputs.outputs.release_tag }}"
          VERSION_CODE="${{ needs.validate-inputs.outputs.version_code }}"
          
          echo "::notice title=iOS Build::üèóÔ∏è Building iOS archive (.ipa)..."
          flutter build ipa --release \
            --export-options-plist=ios/ExportOptions.plist \
            --build-name="$RELEASE_TAG" \
            --build-number="$VERSION_CODE" \
            --dart-define=FLUTTER_WEB_AUTO_DETECT=true \
            --split-debug-info=build/ios/debug-info \
            --obfuscate
          
          # Verify IPA creation
          if [ ! -f build/ios/ipa/*.ipa ]; then
            echo "‚ùå ERROR: IPA file was not created"
            ls -la build/ios/ipa/ 2>/dev/null || echo "Directory does not exist"
            exit 1
          fi
          
          IPA_FILE=$(ls build/ios/ipa/*.ipa)
          echo "ipa-path=$IPA_FILE" >> $GITHUB_OUTPUT
          echo "‚úÖ IPA created: $IPA_FILE"
          echo "üì¶ IPA file ready for TestFlight upload"
          echo "::notice title=iOS Build::‚úÖ IPA archive created successfully"
      
      - name: Upload IPA Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-app-${{ needs.validate-inputs.outputs.release_tag }}
          path: build/ios/ipa/*.ipa
          retention-days: 30
      
      - name: Cleanup Keychain
        if: always()
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db || true

  ios-deploy:
    name: üöÄ iOS TestFlight Deployment
    needs: [validate-inputs, ios-build]
    runs-on: macos-15
    permissions:
      contents: read
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PRIVATE_REPO_TOKEN || secrets.GITHUB_TOKEN }}
          ref: main
      
      - name: Download IPA
        uses: actions/download-artifact@v4
        with:
          name: ios-app-${{ needs.validate-inputs.outputs.release_tag }}
          path: build/ios/ipa/
      
      - name: Cache Ruby Dependencies & Fastlane (iOS)
        uses: actions/cache@v4
        with:
          path: |
            ios/vendor/bundle
            ~/.gem
            ~/.bundle
            ios/.bundle
          key: ruby-fastlane-ios-${{ runner.os }}-${{ hashFiles('ios/Gemfile', 'ios/Gemfile.lock') }}-v2
          restore-keys: |
            ruby-fastlane-ios-${{ runner.os }}-${{ hashFiles('ios/Gemfile') }}-
            ruby-fastlane-ios-${{ runner.os }}-
      
      - name: Setup Ruby for Fastlane (iOS)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
          working-directory: ios
      
      - name: Deploy to TestFlight
        run: |
          # Find and validate IPA file
          IPA_FILES=(build/ios/ipa/*.ipa)
          if [ ! -f "${IPA_FILES[0]}" ]; then
            echo "‚ùå ERROR: No IPA files found in build/ios/ipa/"
            ls -la build/ios/ipa/ || echo "Directory does not exist"
            exit 1
          fi
          
          export IPA_FILE_PATH="$(pwd)/${IPA_FILES[0]}"
          echo "üì± Using IPA file: $IPA_FILE_PATH"
          
          cd ios
          bundle exec fastlane deploy_testflight
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
      
      - name: iOS Build Summary
        run: |
          echo "## üì± iOS Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Release Tag** | \`${{ needs.validate-inputs.outputs.release_tag }}\` |" >> $GITHUB_STEP_SUMMARY
          if [ -f build/ios/ipa/*.ipa ]; then
            echo "| **IPA Size** | \`$(du -h build/ios/ipa/*.ipa | cut -f1)\` |" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **iOS app deployed to TestFlight successfully**" >> $GITHUB_STEP_SUMMARY

  # ===========================
  # FINAL SUMMARY & CLEANUP
  # ===========================
  
  build-summary:
    name: üìä Final Build Summary
    needs: [validate-inputs, android-deploy, ios-deploy]
    if: always() && needs.validate-inputs.result == 'success'
    runs-on: ubuntu-latest
    
    steps:
      - name: Generate Final Build Summary
        run: |
          echo "::notice title=Build Summary::üìä Generating deployment summary..."
          
          echo "## üì¶ Sharded Mobile Build Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "*Build pipeline successfully executed across multiple optimized job fragments*" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Create deployment status
          echo "### üöÄ Deployment Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Input Validation Status
          echo "**üìã Input Validation**" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.validate-inputs.result }}" == "success" ]]; then
            echo "```diff" >> $GITHUB_STEP_SUMMARY
            echo "+ ‚úÖ Completed Successfully" >> $GITHUB_STEP_SUMMARY
            echo "```" >> $GITHUB_STEP_SUMMARY
          else
            echo "```diff" >> $GITHUB_STEP_SUMMARY
            echo "- ‚ùå Failed" >> $GITHUB_STEP_SUMMARY
            echo "```" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Android Build Status
          echo "**ü§ñ Android Pipeline (3 fragments)**" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.validate-inputs.outputs.should_build_android }}" == "true" ]]; then
            if [[ "${{ needs.android-deploy.result }}" == "success" ]]; then
              echo "```diff" >> $GITHUB_STEP_SUMMARY
              echo "+ ‚úÖ Deployed to Google Play Console" >> $GITHUB_STEP_SUMMARY
              echo "```" >> $GITHUB_STEP_SUMMARY
            else
              echo "```diff" >> $GITHUB_STEP_SUMMARY
              echo "- ‚ùå Deployment Failed" >> $GITHUB_STEP_SUMMARY
              echo "```" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "```yaml" >> $GITHUB_STEP_SUMMARY
            echo "‚è≠Ô∏è Skipped" >> $GITHUB_STEP_SUMMARY
            echo "```" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # iOS Build Status  
          echo "**üì± iOS Pipeline (4 fragments)**" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ needs.validate-inputs.outputs.should_build_ios }}" == "true" ]]; then
            if [[ "${{ needs.ios-deploy.result }}" == "success" ]]; then
              echo "```diff" >> $GITHUB_STEP_SUMMARY
              echo "+ ‚úÖ Deployed to TestFlight" >> $GITHUB_STEP_SUMMARY
              echo "```" >> $GITHUB_STEP_SUMMARY
            else
              echo "```diff" >> $GITHUB_STEP_SUMMARY
              echo "- ‚ùå Deployment Failed" >> $GITHUB_STEP_SUMMARY
              echo "```" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "```yaml" >> $GITHUB_STEP_SUMMARY
            echo "‚è≠Ô∏è Skipped" >> $GITHUB_STEP_SUMMARY
            echo "```" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üìä Pipeline Architecture" >> $GITHUB_STEP_SUMMARY
          echo "| Fragment | Purpose | Dependencies | Benefits |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|---------|--------------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| **validate-inputs** | Input validation & setup | None | Fast fail validation |" >> $GITHUB_STEP_SUMMARY
          echo "| **shared-flutter-setup** | Flutter environment | validate-inputs | Shared caching |" >> $GITHUB_STEP_SUMMARY
          echo "| **android-setup** | Android environment | validate-inputs, shared-flutter-setup | Parallel Android prep |" >> $GITHUB_STEP_SUMMARY
          echo "| **android-build** | Build .aab | android-setup | Isolated build process |" >> $GITHUB_STEP_SUMMARY
          echo "| **android-deploy** | Deploy to Play Console | android-build | Separate deployment |" >> $GITHUB_STEP_SUMMARY
          echo "| **ios-setup** | iOS environment | validate-inputs, shared-flutter-setup | Parallel iOS prep |" >> $GITHUB_STEP_SUMMARY
          echo "| **ios-build** | Build .ipa + signing | ios-setup | Secure inline signing |" >> $GITHUB_STEP_SUMMARY
          echo "| **ios-deploy** | Deploy to TestFlight | ios-build | Separate deployment |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üìã Build Details" >> $GITHUB_STEP_SUMMARY
          echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Release Tag** | \`${{ needs.validate-inputs.outputs.release_tag }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Platform** | \`${{ needs.validate-inputs.outputs.build_platform }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Version Code** | \`${{ needs.validate-inputs.outputs.version_code }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Workflow Run** | [\`#${{ github.run_number }}\`](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| **Commit** | [\`$(echo ${{ github.sha }} | cut -c1-7)\`](${{ github.server_url }}/${{ github.repository }}/commit/${{ github.sha }}) |" >> $GITHUB_STEP_SUMMARY
          echo "| **Total Fragments** | \`8 jobs\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üéØ Sharding Benefits Achieved" >> $GITHUB_STEP_SUMMARY
          echo "- ‚ö° **Parallel Execution**: Android and iOS pipelines run simultaneously" >> $GITHUB_STEP_SUMMARY
          echo "- üß© **Modular Design**: Each fragment has a single responsibility" >> $GITHUB_STEP_SUMMARY
          echo "- üíæ **Optimized Caching**: Shared dependencies cached once, reused multiple times" >> $GITHUB_STEP_SUMMARY
          echo "- üîß **Better Debugging**: Isolated failures easier to identify and fix" >> $GITHUB_STEP_SUMMARY
          echo "- üìà **Scalability**: Easy to add new platforms or modify individual steps" >> $GITHUB_STEP_SUMMARY
          echo "- üöÄ **Faster Iteration**: Failed fragments can be rerun without full pipeline" >> $GITHUB_STEP_SUMMARY
          
          echo "::notice title=Build Summary::‚úÖ Sharded deployment pipeline completed"
