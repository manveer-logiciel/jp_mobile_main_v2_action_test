name: Integration Build Preparation

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release Tag (e.g., 3.37.2)'
        required: true
        type: string
      verify_release_tag:
        description: 'Verify Release Tag (must match above)'
        required: true
        type: string
      password:
        description: 'Password for secure operations'
        required: true
        type: string
      build_platform:
        description: 'Select build platform'
        required: true
        type: choice
        options:
          - Both
          - Android
          - iOS
        default: Both
      deploy_to_testing:
        description: 'Deploy to testing (Google Play Internal Testing / TestFlight)'
        required: false
        type: boolean
        default: true

env:
  FLUTTER_VERSION: '3.27.2'
  JAVA_VERSION: '17'

jobs:
  prepare-and-validate:
    name: Prepare & Validate Build
    runs-on: ubuntu-latest  # Use Ubuntu for faster validation
    permissions:
      contents: write
    outputs:
      release_tag: ${{ steps.validation.outputs.release_tag }}
      build_platform: ${{ steps.validation.outputs.build_platform }}
      should_build_android: ${{ steps.validation.outputs.should_build_android }}
      should_build_ios: ${{ steps.validation.outputs.should_build_ios }}
      deploy_to_testing: ${{ steps.validation.outputs.deploy_to_testing }}
      version_name: ${{ steps.validation.outputs.version_name }}
      build_number: ${{ steps.validation.outputs.build_number }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Fetch all history and tags
      
      - name: Validate Inputs & Set Outputs
        id: validation
        run: |
          RELEASE_TAG="${{ inputs.release_tag }}"
          VERIFY_RELEASE_TAG="${{ inputs.verify_release_tag }}"
          PASSWORD="${{ inputs.password }}"
          PLATFORM="${{ inputs.build_platform }}"
          
          echo "üîç Validating inputs..."
          echo "üè∑Ô∏è Release Tag: $RELEASE_TAG"
          echo "üîê Password: [REDACTED]"
          echo "üèóÔ∏è Platform: $PLATFORM"
          
          # Validate release tags match
          if [[ "$RELEASE_TAG" != "$VERIFY_RELEASE_TAG" ]]; then
            echo "‚ùå ERROR: Release tag and verify release tag do not match"
            echo "Release Tag: '$RELEASE_TAG'"
            echo "Verify Release Tag: '$VERIFY_RELEASE_TAG'"
            exit 1
          fi
          
          # Validate release tag format (semantic version without 'v' prefix)
          if [[ ! $RELEASE_TAG =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå ERROR: Invalid release tag format. Expected format: x.y.z (e.g., 3.37.2)"
            exit 1
          fi
          
          # Check if the tag exists in the repository
          echo "üîç Checking if tag '$RELEASE_TAG' exists..."
          if ! git tag -l | grep -q "^$RELEASE_TAG$"; then
            echo "‚ùå ERROR: Tag '$RELEASE_TAG' does not exist in the repository"
            echo "Available tags:"
            git tag -l | sort -V | tail -10
            echo ""
            echo "Please create the tag first using:"
            echo "  git tag $RELEASE_TAG"
            echo "  git push origin $RELEASE_TAG"
            exit 1
          fi
          
          echo "‚úÖ Tag '$RELEASE_TAG' exists in the repository"
          
          # Validate password is provided and not empty
          if [[ -z "$PASSWORD" ]]; then
            echo "‚ùå ERROR: Password input is required"
            exit 1
          fi
          
          # Validate password against the stored secret
          STORED_PASSWORD="${{ secrets.RELEASE_PASSWORD }}"
          if [[ -z "$STORED_PASSWORD" ]]; then
            echo "‚ùå ERROR: RELEASE_PASSWORD secret is not configured"
            echo "Please set the RELEASE_PASSWORD secret in repository settings"
            exit 1
          fi
          
          if [[ "$PASSWORD" != "$STORED_PASSWORD" ]]; then
            echo "‚ùå ERROR: Invalid password provided"
            echo "The password does not match the stored RELEASE_PASSWORD secret"
            exit 1
          fi
          
          echo "üîê Password verified successfully against stored secret"
          
          echo "‚úÖ Input validation successful"
          
          # Set outputs for next steps
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "build_platform=$PLATFORM" >> $GITHUB_OUTPUT
          echo "deploy_to_testing=${{ inputs.deploy_to_testing }}" >> $GITHUB_OUTPUT
          
          # Set conditional build flags
          if [[ "$PLATFORM" == "Android" || "$PLATFORM" == "Both" ]]; then
            echo "should_build_android=true" >> $GITHUB_OUTPUT
          else
            echo "should_build_android=false" >> $GITHUB_OUTPUT
          fi
          
          if [[ "$PLATFORM" == "iOS" || "$PLATFORM" == "Both" ]]; then
            echo "should_build_ios=true" >> $GITHUB_OUTPUT
          else
            echo "should_build_ios=false" >> $GITHUB_OUTPUT
            fi
      
      - name: Setup Ruby for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: false
      
      - name: Validate Build Numbers Against App Stores
        run: |
          echo "üîç Validating build numbers against app stores using Fastlane..."
          
          # Checkout the specific tag to get its version
          git checkout ${{ inputs.release_tag }}
          
          # Extract version info from pubspec.yaml at the tagged version
          PUBSPEC_VERSION=$(grep '^version:' pubspec.yaml | cut -d' ' -f2)
          VERSION_NAME=$(echo $PUBSPEC_VERSION | cut -d'+' -f1)
          BUILD_NUMBER=$(echo $PUBSPEC_VERSION | cut -d'+' -f2)
          
          echo "üìù Version from tag ${{ inputs.release_tag }}: $VERSION_NAME (build: $BUILD_NUMBER)"
          
          # Set version outputs
          echo "version_name=$VERSION_NAME" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          
          # Basic validation - build number should be a positive integer
          if ! [[ "$BUILD_NUMBER" =~ ^[0-9]+$ ]] || [[ $BUILD_NUMBER -le 0 ]]; then
            echo "‚ùå ERROR: Invalid build number format!"
            echo "   Build number: $BUILD_NUMBER"
            echo "   Build number must be a positive integer"
            exit 1
          fi
          
          # Validate Android build number using Fastlane
          if [[ "${{ inputs.build_platform }}" == "Android" || "${{ inputs.build_platform }}" == "Both" ]]; then
            echo "ü§ñ Running Android build number validation..."
            
            # Setup Google Play Console service account
            echo "${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}" | base64 --decode > android/play-console-service-account.json
            
            # Setup Android Fastlane dependencies
            cd android
            bundle install --quiet
            
            # Run Fastlane validation
            bundle exec fastlane android validate_build_number version_name:"$VERSION_NAME" build_number:"$BUILD_NUMBER"
            
            # Cleanup
            cd ..
            rm -f android/play-console-service-account.json
          fi
          
          # Validate iOS build number using Fastlane
          if [[ "${{ inputs.build_platform }}" == "iOS" || "${{ inputs.build_platform }}" == "Both" ]]; then
            echo "üçé Running iOS build number validation..."
            
            # Setup iOS Fastlane dependencies
            cd ios
            bundle install --quiet
            
            # Run Fastlane validation
            bundle exec fastlane ios validate_build_number version_name:"$VERSION_NAME" build_number:"$BUILD_NUMBER"
            
            cd ..
          fi
          
          echo "üéâ All build number validations completed successfully!"
        env:
          SUPPLY_JSON_KEY_FILE: play-console-service-account.json
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
        
      - name: Validation Complete
        run: |
          echo "::notice title=Preparation Complete::‚úÖ Build validation completed successfully"


  build-android:
    name: Build Android (.aab)
    needs: prepare-and-validate
    if: ${{ needs.prepare-and-validate.outputs.should_build_android == 'true' }}
    runs-on: ubuntu-latest  # Use Ubuntu for Android builds - much faster!
    permissions:
      contents: read
      packages: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PRIVATE_REPO_TOKEN || secrets.GITHUB_TOKEN }}
          ref: ${{ needs.prepare-and-validate.outputs.release_tag }}
      
      # Restore cached dependencies from setup job
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
      
      - name: Cache Flutter Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: flutter-${{ runner.os }}-${{ env.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.lock', '**/pubspec.yaml') }}
          restore-keys: |
            flutter-${{ runner.os }}-${{ env.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.lock') }}-
            flutter-${{ runner.os }}-${{ env.FLUTTER_VERSION }}-
            flutter-${{ runner.os }}-
      
      - name: Cache Android Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.android
            android/.gradle
          key: android-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}-v3
          restore-keys: |
            android-${{ runner.os }}-${{ hashFiles('**/*.gradle*') }}-
            android-${{ runner.os }}-
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: false
      
      - name: Configure Git for private repos
        run: |
          TOKEN="${{ secrets.PRIVATE_REPO_TOKEN || secrets.GITHUB_TOKEN }}"
          git config --global url."https://x-access-token:${TOKEN}@github.com/".insteadOf "https://github.com/"
      
      - name: Get Flutter dependencies
        run: flutter pub get
      
      # Batch Android configuration for better performance
      - name: Configure Android Build Environment
        run: |
          # Create keystore
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/keystore.jks
          chmod 600 android/keystore.jks
          
          # Create key.properties
          cat > android/key.properties << EOF
          storePassword=${{ secrets.ANDROID_STORE_PASSWORD }}
          keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
          keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}
          storeFile=../keystore.jks
          EOF
          
          # Extract version info from pubspec.yaml (e.g., 3.38.0+303800005)
          PUBSPEC_VERSION=$(grep '^version:' pubspec.yaml | cut -d' ' -f2)
          VERSION_NAME=$(echo $PUBSPEC_VERSION | cut -d'+' -f1)
          VERSION_CODE=$(echo $PUBSPEC_VERSION | cut -d'+' -f2)
          
          echo "üìù Using Android version: $VERSION_NAME (code: $VERSION_CODE)"
          
          # Update local.properties
          cat > android/local.properties << EOF
          flutter.versionName=$VERSION_NAME
          flutter.versionCode=$VERSION_CODE
          flutter.sdk=$FLUTTER_ROOT
          EOF
          
          echo "‚úÖ Android build environment configured"
      
      - name: Build App Bundle
        run: |
          echo "::notice title=Android Build::üèóÔ∏è Building release app bundle..."
          flutter build appbundle --release \
            --dart-define=FLUTTER_WEB_AUTO_DETECT=true \
            --split-debug-info=build/android/debug-info \
            --obfuscate
          echo "::notice title=Android Build::‚úÖ App bundle created successfully"
      
      - name: Upload App Bundle Artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: android-app-bundle-${{ needs.prepare-and-validate.outputs.release_tag }}
          path: build/app/outputs/bundle/release/app-release.aab
          retention-days: 30
      
      - name: Android Build Summary
        run: |
          BUNDLE_SIZE=$(du -h build/app/outputs/bundle/release/app-release.aab | cut -f1)
          echo "::notice title=Android Build::‚úÖ v${{ needs.prepare-and-validate.outputs.version_name }}+${{ needs.prepare-and-validate.outputs.build_number }} built successfully ($BUNDLE_SIZE)"

  deploy-android:
    name: Deploy Android to Testing
    needs: [prepare-and-validate, build-android]
    if: ${{ needs.prepare-and-validate.outputs.should_build_android == 'true' && needs.prepare-and-validate.outputs.deploy_to_testing == 'true' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PRIVATE_REPO_TOKEN || secrets.GITHUB_TOKEN }}
          ref: ${{ needs.prepare-and-validate.outputs.release_tag }}
      
      - name: Download App Bundle Artifact
        uses: actions/download-artifact@v4
        with:
          name: android-app-bundle-${{ needs.prepare-and-validate.outputs.release_tag }}
          path: build/app/outputs/bundle/release/
      
      
      - name: Setup Ruby for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
          working-directory: android
      
      - name: Setup Google Play Console Service Account
        run: |
          echo "${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}" | base64 --decode > android/play-console-service-account.json
          chmod 600 android/play-console-service-account.json
      
      - name: Deploy to Google Play Console Internal Testing
        run: |
          export AAB_FILE_PATH="$(pwd)/build/app/outputs/bundle/release/app-release.aab"
          cd android
          bundle exec fastlane deploy_internal
        env:
          SUPPLY_JSON_KEY_FILE: play-console-service-account.json
      
      - name: Android Deployment Summary
        run: |
          echo "## üöÄ Android Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **App Bundle deployed to Google Play Console Internal Testing**" >> $GITHUB_STEP_SUMMARY

  build-ios:
    name: Build iOS
    needs: prepare-and-validate
    if: ${{ needs.prepare-and-validate.outputs.should_build_ios == 'true' }}
    runs-on: macos-15  # Use macOS-15 to support Xcode 16.4
    permissions:
      contents: read
      packages: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PRIVATE_REPO_TOKEN || secrets.GITHUB_TOKEN }}
          ref: ${{ needs.prepare-and-validate.outputs.release_tag }}
      
      - name: Cache Flutter Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            ~/Library/Caches/dart-pub
            .dart_tool
          key: flutter-macOS-${{ env.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.lock', '**/pubspec.yaml') }}
          restore-keys: |
            flutter-macOS-${{ env.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.lock') }}-
            flutter-macOS-${{ env.FLUTTER_VERSION }}-
            flutter-macOS-
      
      - name: Cache CocoaPods Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ios/Pods
            ~/.cocoapods
            ~/Library/Caches/CocoaPods
          key: cocoapods-${{ runner.os }}-${{ hashFiles('**/Podfile.lock', 'ios/Runner.xcodeproj/project.pbxproj') }}-v3
          restore-keys: |
            cocoapods-${{ runner.os }}-${{ hashFiles('**/Podfile.lock') }}-
            cocoapods-${{ runner.os }}-
      
      - name: Select Xcode 16.4
        run: |
          sudo xcode-select --switch /Applications/Xcode_16.4.app/Contents/Developer
          xcodebuild -version
          echo "Selected Xcode version:"
          xcode-select -p
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: false
      
      - name: Configure Git for private repos
        run: |
          TOKEN="${{ secrets.PRIVATE_REPO_TOKEN || secrets.GITHUB_TOKEN }}"
          git config --global url."https://x-access-token:${TOKEN}@github.com/".insteadOf "https://github.com/"
      
      - name: Get Flutter dependencies
        run: flutter pub get
      
      - name: Install CocoaPods dependencies
        run: |
          cd ios
          if [ ! -d "Pods" ] || [ ! -f "Pods/Manifest.lock" ]; then
            pod install --repo-update
          else
            pod install
          fi
      
      # iOS Build Steps
      
      - name: Configure Xcode Project for Manual Signing
        run: |
          echo "üîß Configuring Xcode project for manual signing..."
          
          # Function to safely set plist value (add if doesn't exist, set if exists)
          safe_pbxproj_set() {
            local target_id="$1"
            local key="$2"
            local value="$3"
            
            if /usr/libexec/PlistBuddy -c "Print :objects:$target_id:buildSettings:$key" ios/Runner.xcodeproj/project.pbxproj >/dev/null 2>&1; then
              /usr/libexec/PlistBuddy -c "Set :objects:$target_id:buildSettings:$key $value" ios/Runner.xcodeproj/project.pbxproj
            else
              /usr/libexec/PlistBuddy -c "Add :objects:$target_id:buildSettings:$key string $value" ios/Runner.xcodeproj/project.pbxproj
            fi
          }
          
          # Configure main app (Runner target) - Debug, Release, Profile
          echo "üì± Configuring main app signing..."
          safe_pbxproj_set "97C147061CF9000F007C117D" "CODE_SIGN_STYLE" "Manual"
          safe_pbxproj_set "97C147071CF9000F007C117D" "CODE_SIGN_STYLE" "Manual"
          safe_pbxproj_set "249021D4217E4FDB00AE95B9" "CODE_SIGN_STYLE" "Manual"
          
          safe_pbxproj_set "97C147061CF9000F007C117D" "CODE_SIGN_IDENTITY" "Apple Distribution"
          safe_pbxproj_set "97C147071CF9000F007C117D" "CODE_SIGN_IDENTITY" "Apple Distribution"
          safe_pbxproj_set "249021D4217E4FDB00AE95B9" "CODE_SIGN_IDENTITY" "Apple Distribution"
          
          # Configure Share Extension target - Debug, Release, Profile
          echo "üì± Configuring Share Extension signing..."
          safe_pbxproj_set "E2B11C5528B6384500902FF7" "CODE_SIGN_STYLE" "Manual"
          safe_pbxproj_set "E2B11C5628B6384500902FF7" "CODE_SIGN_STYLE" "Manual"
          safe_pbxproj_set "E2B11C5728B6384500902FF7" "CODE_SIGN_STYLE" "Manual"
          
          safe_pbxproj_set "E2B11C5528B6384500902FF7" "CODE_SIGN_IDENTITY" "Apple Distribution"
          safe_pbxproj_set "E2B11C5628B6384500902FF7" "CODE_SIGN_IDENTITY" "Apple Distribution"
          safe_pbxproj_set "E2B11C5728B6384500902FF7" "CODE_SIGN_IDENTITY" "Apple Distribution"
          
          echo "‚úÖ Xcode project configured for manual signing (both main app and Share Extension)"
      
      
      # iOS Code Signing Setup
      - name: Setup iOS Code Signing
        env:
          IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE_BASE64 }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
          IOS_SHARE_EXTENSION_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_SHARE_EXTENSION_PROVISIONING_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.IOS_KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          MAIN_PROFILE_PATH=$RUNNER_TEMP/main_app.mobileprovision
          SHARE_PROFILE_PATH=$RUNNER_TEMP/share_extension.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # Import certificate and provisioning profiles from secrets
          echo -n "$IOS_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$IOS_PROVISIONING_PROFILE_BASE64" | base64 --decode -o $MAIN_PROFILE_PATH
          echo -n "$IOS_SHARE_EXTENSION_PROVISIONING_PROFILE_BASE64" | base64 --decode -o $SHARE_PROFILE_PATH
          
          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$IOS_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # Install provisioning profiles
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          
          # Extract profile information with streamlined error handling
          MAIN_PROFILE_UUID=$(security cms -D -i $MAIN_PROFILE_PATH | plutil -extract UUID xml1 -o - -- - | xmllint --xpath "//string/text()" - 2>/dev/null || security cms -D -i $MAIN_PROFILE_PATH | grep -A1 "UUID" | grep string | sed 's/.*<string>\(.*\)<\/string>.*/\1/' | head -1)
          SHARE_PROFILE_UUID=$(security cms -D -i $SHARE_PROFILE_PATH | plutil -extract UUID xml1 -o - -- - | xmllint --xpath "//string/text()" - 2>/dev/null || security cms -D -i $SHARE_PROFILE_PATH | grep -A1 "UUID" | grep string | sed 's/.*<string>\(.*\)<\/string>.*/\1/' | head -1)
          MAIN_PROFILE_NAME=$(security cms -D -i $MAIN_PROFILE_PATH | plutil -extract Name xml1 -o - -- - | xmllint --xpath "//string/text()" - 2>/dev/null || security cms -D -i $MAIN_PROFILE_PATH | grep -A1 "Name" | grep string | sed 's/.*<string>\(.*\)<\/string>.*/\1/' | head -1)
          SHARE_PROFILE_NAME=$(security cms -D -i $SHARE_PROFILE_PATH | plutil -extract Name xml1 -o - -- - | xmllint --xpath "//string/text()" - 2>/dev/null || security cms -D -i $SHARE_PROFILE_PATH | grep -A1 "Name" | grep string | sed 's/.*<string>\(.*\)<\/string>.*/\1/' | head -1)
          
          # Validate extracted values
          if [[ -z "$MAIN_PROFILE_UUID" ]] || [[ -z "$MAIN_PROFILE_NAME" ]] || [[ -z "$SHARE_PROFILE_UUID" ]] || [[ -z "$SHARE_PROFILE_NAME" ]]; then
            echo "‚ùå ERROR: Failed to extract provisioning profile information"
            exit 1
          fi
          
          # Install profiles
          cp $MAIN_PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles/$MAIN_PROFILE_UUID.mobileprovision
          cp $SHARE_PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles/$SHARE_PROFILE_UUID.mobileprovision
          
          # Update ExportOptions.plist
          cp ios/ExportOptions.plist ios/ExportOptions.plist.backup
          
          # Function to safely update plist values
          safe_plist_update() {
            local key="$1"
            local value="$2"
            if ! /usr/libexec/PlistBuddy -c "Set :provisioningProfiles:$key \"$value\"" ios/ExportOptions.plist 2>/dev/null; then
              /usr/libexec/PlistBuddy -c "Add :provisioningProfiles:$key string \"$value\"" ios/ExportOptions.plist 2>/dev/null || return 1
            fi
          }
          
          # Update provisioning profiles in ExportOptions.plist
          safe_plist_update "${{ secrets.IOS_BUNDLE_ID }}" "$MAIN_PROFILE_NAME"
          safe_plist_update "${{ secrets.IOS_SHARE_EXTENSION_BUNDLE_ID }}" "$SHARE_PROFILE_NAME"
          
          # Basic bundle ID validation
          MAIN_BUNDLE_ID_FULL=$(security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/$MAIN_PROFILE_UUID.mobileprovision | grep -A1 "application-identifier" | grep string | sed 's/.*<string>\(.*\)<\/string>.*/\1/' | head -1)
          MAIN_BUNDLE_ID=$(echo "$MAIN_BUNDLE_ID_FULL" | sed 's/^[^.]*\.//')
          
          if [[ "$MAIN_BUNDLE_ID" != "${{ secrets.IOS_BUNDLE_ID }}" ]]; then
            echo "‚ùå ERROR: Bundle ID mismatch. Expected: ${{ secrets.IOS_BUNDLE_ID }}, Found: $MAIN_BUNDLE_ID"
            exit 1
          fi
          
          echo "‚úÖ iOS code signing setup complete"
          echo "::notice title=iOS Build::üîê Code signing configured successfully"
      
      - name: Configure Provisioning Profile UUIDs in Xcode Project
        run: |
          echo "üîß Setting provisioning profile UUIDs in Xcode project..."
          
          # Get the profile UUIDs that were extracted earlier
          MAIN_PROFILE_PATH=$RUNNER_TEMP/main_app.mobileprovision
          SHARE_PROFILE_PATH=$RUNNER_TEMP/share_extension.mobileprovision
          
          # Use the same robust extraction method as before
          MAIN_PROFILE_UUID=$(security cms -D -i $MAIN_PROFILE_PATH | plutil -extract UUID xml1 -o - -- - | xmllint --xpath "//string/text()" - 2>/dev/null || security cms -D -i $MAIN_PROFILE_PATH | grep -A1 "UUID" | grep string | sed 's/.*<string>\(.*\)<\/string>.*/\1/' | head -1)
          SHARE_PROFILE_UUID=$(security cms -D -i $SHARE_PROFILE_PATH | plutil -extract UUID xml1 -o - -- - | xmllint --xpath "//string/text()" - 2>/dev/null || security cms -D -i $SHARE_PROFILE_PATH | grep -A1 "UUID" | grep string | sed 's/.*<string>\(.*\)<\/string>.*/\1/' | head -1)
          
          # Validate the extracted UUIDs
          if [[ -z "$MAIN_PROFILE_UUID" ]] || [[ -z "$SHARE_PROFILE_UUID" ]]; then
            echo "‚ùå ERROR: Failed to extract provisioning profile UUIDs for Xcode project configuration"
            echo "üìã Main profile UUID: '$MAIN_PROFILE_UUID'"
            echo "üìã Share profile UUID: '$SHARE_PROFILE_UUID'"
            exit 1
          fi
          
          echo "üìã Setting Main app profile UUID: $MAIN_PROFILE_UUID"
          echo "üìã Setting Share extension profile UUID: $SHARE_PROFILE_UUID"
          
          # Function to safely set plist value (add if doesn't exist, set if exists)
          safe_pbxproj_set() {
            local target_id="$1"
            local key="$2"
            local value="$3"
            
            if /usr/libexec/PlistBuddy -c "Print :objects:$target_id:buildSettings:$key" ios/Runner.xcodeproj/project.pbxproj >/dev/null 2>&1; then
              /usr/libexec/PlistBuddy -c "Set :objects:$target_id:buildSettings:$key $value" ios/Runner.xcodeproj/project.pbxproj
            else
              /usr/libexec/PlistBuddy -c "Add :objects:$target_id:buildSettings:$key string $value" ios/Runner.xcodeproj/project.pbxproj
            fi
          }
          
          # Set provisioning profile UUIDs for main app (Runner target) - Debug, Release, Profile
          echo "üì± Setting main app provisioning profile UUIDs..."
          safe_pbxproj_set "97C147061CF9000F007C117D" "PROVISIONING_PROFILE_SPECIFIER" "$MAIN_PROFILE_UUID"
          safe_pbxproj_set "97C147071CF9000F007C117D" "PROVISIONING_PROFILE_SPECIFIER" "$MAIN_PROFILE_UUID"
          safe_pbxproj_set "249021D4217E4FDB00AE95B9" "PROVISIONING_PROFILE_SPECIFIER" "$MAIN_PROFILE_UUID"
          
          # Set development team for main app
          safe_pbxproj_set "97C147061CF9000F007C117D" "DEVELOPMENT_TEAM" "${{ secrets.APPLE_TEAM_ID }}"
          safe_pbxproj_set "97C147071CF9000F007C117D" "DEVELOPMENT_TEAM" "${{ secrets.APPLE_TEAM_ID }}"
          safe_pbxproj_set "249021D4217E4FDB00AE95B9" "DEVELOPMENT_TEAM" "${{ secrets.APPLE_TEAM_ID }}"
          
          # Set provisioning profile UUIDs for Share Extension target - Debug, Release, Profile
          echo "üì± Setting Share Extension provisioning profile UUIDs..."
          safe_pbxproj_set "E2B11C5528B6384500902FF7" "PROVISIONING_PROFILE_SPECIFIER" "$SHARE_PROFILE_UUID"
          safe_pbxproj_set "E2B11C5628B6384500902FF7" "PROVISIONING_PROFILE_SPECIFIER" "$SHARE_PROFILE_UUID"
          safe_pbxproj_set "E2B11C5728B6384500902FF7" "PROVISIONING_PROFILE_SPECIFIER" "$SHARE_PROFILE_UUID"
          
          # Set development team for Share Extension
          safe_pbxproj_set "E2B11C5528B6384500902FF7" "DEVELOPMENT_TEAM" "${{ secrets.APPLE_TEAM_ID }}"
          safe_pbxproj_set "E2B11C5628B6384500902FF7" "DEVELOPMENT_TEAM" "${{ secrets.APPLE_TEAM_ID }}"
          safe_pbxproj_set "E2B11C5728B6384500902FF7" "DEVELOPMENT_TEAM" "${{ secrets.APPLE_TEAM_ID }}"
          
          echo "‚úÖ Provisioning profile UUIDs configured for both main app and Share Extension"
      
      - name: Update iOS Version
        run: |
          # Extract version info from pubspec.yaml (e.g., 3.38.0+303800005)
          PUBSPEC_VERSION=$(grep '^version:' pubspec.yaml | cut -d' ' -f2)
          VERSION=$(echo $PUBSPEC_VERSION | cut -d'+' -f1)
          BUILD_NUMBER=$(echo $PUBSPEC_VERSION | cut -d'+' -f2)
          
          echo "üìù Using iOS version: $VERSION (build: $BUILD_NUMBER)"
          
          # Function to safely set plist value (add if doesn't exist, set if exists)
          safe_plist_set() {
            local plist_file="$1"
            local key="$2"
            local value="$3"
            
            if /usr/libexec/PlistBuddy -c "Print :$key" "$plist_file" >/dev/null 2>&1; then
              /usr/libexec/PlistBuddy -c "Set :$key $value" "$plist_file"
            else
              /usr/libexec/PlistBuddy -c "Add :$key string $value" "$plist_file"
            fi
          }
          
          # Update Info.plist for main app
          echo "üì± Updating main app Info.plist..."
          safe_plist_set "ios/Runner/Info.plist" "CFBundleShortVersionString" "$VERSION"
          safe_plist_set "ios/Runner/Info.plist" "CFBundleVersion" "$BUILD_NUMBER"
          
          # Update Info.plist for share extension
          echo "üì± Updating share extension Info.plist..."
          safe_plist_set "ios/Share Extension/Info.plist" "CFBundleShortVersionString" "$VERSION"
          safe_plist_set "ios/Share Extension/Info.plist" "CFBundleVersion" "$BUILD_NUMBER"
          
          echo "‚úÖ iOS version updated successfully for main app and share extension"
      
      - name: Build iOS Archive
        run: |
          # Extract version info from pubspec.yaml (e.g., 3.38.0+303800005)
          PUBSPEC_VERSION=$(grep '^version:' pubspec.yaml | cut -d' ' -f2)
          VERSION=$(echo $PUBSPEC_VERSION | cut -d'+' -f1)
          BUILD_NUMBER=$(echo $PUBSPEC_VERSION | cut -d'+' -f2)
          
          echo "üìù Building iOS with version: $VERSION (build: $BUILD_NUMBER)"
          echo "::notice title=iOS Build::üèóÔ∏è Building iOS archive (.ipa)..."
          flutter build ipa --release \
            --export-options-plist=ios/ExportOptions.plist \
            --build-name="$VERSION" \
            --build-number="$BUILD_NUMBER" \
            --dart-define=FLUTTER_WEB_AUTO_DETECT=true \
            --split-debug-info=build/ios/debug-info \
            --obfuscate
          
          # Quick validation of IPA creation
          if [ ! -f build/ios/ipa/*.ipa ]; then
            echo "‚ùå ERROR: IPA file was not created"
            ls -la build/ios/ipa/ 2>/dev/null || echo "Directory does not exist"
            exit 1
          fi
          
          echo "‚úÖ IPA created: $(ls build/ios/ipa/*.ipa)"
          echo "üì¶ IPA file ready for TestFlight upload"
          echo "::notice title=iOS Build::‚úÖ IPA archive created successfully"
          
          # Verify IPA structure for TestFlight compatibility
          IPA_FILE=$(ls build/ios/ipa/*.ipa)
          echo "üîç Verifying IPA structure..."
          unzip -l "$IPA_FILE" | head -20
      
      - name: Upload iOS App (.ipa) Artifact
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('build/ios/ipa/*.ipa') != ''
        with:
          name: ios-app-${{ needs.prepare-and-validate.outputs.release_tag }}
          path: build/ios/ipa/*.ipa
          retention-days: 30
      
      - name: Cleanup Keychain
        if: always()
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db || true
      
      - name: iOS Build Summary
        if: always()
        run: |
          if [ -f build/ios/ipa/*.ipa ]; then
            IPA_SIZE=$(du -h build/ios/ipa/*.ipa | cut -f1)
            echo "::notice title=iOS Build::‚úÖ v${{ needs.prepare-and-validate.outputs.version_name }}+${{ needs.prepare-and-validate.outputs.build_number }} built successfully ($IPA_SIZE)"
          else
            echo "::error title=iOS Build::‚ùå v${{ needs.prepare-and-validate.outputs.version_name }}+${{ needs.prepare-and-validate.outputs.build_number }} build failed"
          fi

  deploy-ios:
    name: Deploy iOS to Testing
    needs: [prepare-and-validate, build-ios]
    if: ${{ needs.prepare-and-validate.outputs.should_build_ios == 'true' && needs.prepare-and-validate.outputs.deploy_to_testing == 'true' }}
    runs-on: macos-15
    permissions:
      contents: read
      packages: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PRIVATE_REPO_TOKEN || secrets.GITHUB_TOKEN }}
          ref: ${{ needs.prepare-and-validate.outputs.release_tag }}
      
      - name: Download iOS App Artifact
        uses: actions/download-artifact@v4
        with:
          name: ios-app-${{ needs.prepare-and-validate.outputs.release_tag }}
          path: build/ios/ipa/
      
      
      - name: Setup Ruby for Fastlane (iOS)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
          working-directory: ios
      
      - name: Deploy to TestFlight
        run: |
          # Find and validate IPA file
          IPA_FILES=(build/ios/ipa/*.ipa)
          if [ ! -f "${IPA_FILES[0]}" ]; then
            echo "‚ùå ERROR: No IPA files found in build/ios/ipa/"
            ls -la build/ios/ipa/ || echo "Directory does not exist"
            exit 1
          fi
          
          if [ ${#IPA_FILES[@]} -gt 1 ]; then
            echo "‚ö†Ô∏è  WARNING: Multiple IPA files found, using first one:"
            printf '%s\n' "${IPA_FILES[@]}"
          fi
          
          export IPA_FILE_PATH="$(pwd)/${IPA_FILES[0]}"
          echo "üì± Using IPA file: $IPA_FILE_PATH"
          
          cd ios
          bundle exec fastlane deploy_testflight
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
      
      - name: iOS Deployment Summary
        run: |
          echo "## üöÄ iOS Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **iOS app deployed to TestFlight successfully**" >> $GITHUB_STEP_SUMMARY

  build-summary:
    name: Final Build Summary
    needs: [prepare-and-validate, build-android, build-ios, deploy-android, deploy-ios]
    if: always() && needs.prepare-and-validate.result == 'success'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Generate Final Build Summary
        run: |
          # Extract version info from the tagged release
          PUBSPEC_VERSION=$(git show ${{ needs.prepare-and-validate.outputs.release_tag }}:pubspec.yaml | grep '^version:' | cut -d' ' -f2)
          VERSION_NAME=$(echo $PUBSPEC_VERSION | cut -d'+' -f1)
          BUILD_NUMBER=$(echo $PUBSPEC_VERSION | cut -d'+' -f2)
          
          echo "## üì¶ Release Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Version Information
          echo "### üìã Version Details" >> $GITHUB_STEP_SUMMARY
          echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **üè∑Ô∏è Release Tag** | \`${{ needs.prepare-and-validate.outputs.release_tag }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **üì± Version Name** | \`$VERSION_NAME\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **üî¢ Build Number** | \`$BUILD_NUMBER\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **üéØ Platform** | \`${{ needs.prepare-and-validate.outputs.build_platform }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **üöÄ Deploy to Testing** | \`${{ needs.prepare-and-validate.outputs.deploy_to_testing }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Build Status
          echo "### üî® Build & Deploy Status" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Android Status
          if [[ "${{ needs.prepare-and-validate.outputs.should_build_android }}" == "true" ]]; then
            if [[ "${{ needs.build-android.result }}" == "success" ]]; then
              ANDROID_STATUS="‚úÖ Built Successfully"
            else
              ANDROID_STATUS="‚ùå Build Failed"
            fi
            
            if [[ "${{ needs.prepare-and-validate.outputs.deploy_to_testing }}" == "true" ]]; then
              if [[ "${{ needs.deploy-android.result }}" == "success" ]]; then
                ANDROID_DEPLOY="‚úÖ Deployed to Play Console Internal"
              else
                ANDROID_DEPLOY="‚ùå Deployment Failed"
              fi
            else
              ANDROID_DEPLOY="‚è≠Ô∏è Deployment Skipped"
            fi
          else
            ANDROID_STATUS="‚è≠Ô∏è Build Skipped"
            ANDROID_DEPLOY="‚è≠Ô∏è Deployment Skipped"
          fi
          
          # iOS Status  
          if [[ "${{ needs.prepare-and-validate.outputs.should_build_ios }}" == "true" ]]; then
            if [[ "${{ needs.build-ios.result }}" == "success" ]]; then
              IOS_STATUS="‚úÖ Built Successfully"
            else
              IOS_STATUS="‚ùå Build Failed"
            fi
            
            if [[ "${{ needs.prepare-and-validate.outputs.deploy_to_testing }}" == "true" ]]; then
              if [[ "${{ needs.deploy-ios.result }}" == "success" ]]; then
                IOS_DEPLOY="‚úÖ Deployed to TestFlight"
              else
                IOS_DEPLOY="‚ùå Deployment Failed"
              fi
            else
              IOS_DEPLOY="‚è≠Ô∏è Deployment Skipped"
            fi
          else
            IOS_STATUS="‚è≠Ô∏è Build Skipped"
            IOS_DEPLOY="‚è≠Ô∏è Deployment Skipped"
          fi
          
          echo "| **ü§ñ Android Build** | $ANDROID_STATUS |" >> $GITHUB_STEP_SUMMARY
          echo "| **ü§ñ Android Deploy** | $ANDROID_DEPLOY |" >> $GITHUB_STEP_SUMMARY
          echo "| **üì± iOS Build** | $IOS_STATUS |" >> $GITHUB_STEP_SUMMARY
          echo "| **üì± iOS Deploy** | $IOS_DEPLOY |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Build Environment Summary
          echo "### ‚öôÔ∏è Build Environment" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Version |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Flutter** | \`${{ env.FLUTTER_VERSION }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Java** | \`${{ env.JAVA_VERSION }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Runner OS** | \`${{ runner.os }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Workflow** | [\`#${{ github.run_number }}\`](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) |" >> $GITHUB_STEP_SUMMARY
          
          echo "::notice title=Build Summary::üìä Release ${{ needs.prepare-and-validate.outputs.release_tag }} build completed"
