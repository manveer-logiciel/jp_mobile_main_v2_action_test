name: Integration Build Preparation

on:
  workflow_dispatch:
    inputs:
      app_version:
        description: 'App Version (e.g., 3.37.2)'
        required: true
        type: string
      build_number:
        description: 'Build Number (e.g., 303700200)'
        required: true
        type: string
      build_platform:
        description: 'Select build platform'
        required: true
        type: choice
        options:
          - Both
          - Android
          - iOS
        default: Both

jobs:
  prepare-build:
    name: Prepare Build Environment
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      app_version: ${{ steps.validation.outputs.app_version }}
      build_number: ${{ steps.validation.outputs.build_number }}
      build_platform: ${{ steps.validation.outputs.build_platform }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Validate Inputs
        id: validation
        run: |
          VERSION="${{ inputs.app_version }}"
          BUILD_NUMBER="${{ inputs.build_number }}"
          PLATFORM="${{ inputs.build_platform }}"
          
          echo "🔍 Validating inputs..."
          echo "📋 Version: $VERSION"
          echo "🔢 Build Number: $BUILD_NUMBER"
          echo "🏗️ Platform: $PLATFORM"
          
          # Validate version format (x.y.z where x, y, z are numbers)
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ ERROR: Invalid version format. Expected format: x.y.z (e.g., 3.37.2)"
            exit 1
          fi
          
          # Validate build number is numeric
          if [[ ! $BUILD_NUMBER =~ ^[0-9]+$ ]]; then
            echo "❌ ERROR: Build number must be numeric"
            exit 1
          fi
          
          echo "✅ Input validation successful"
          
          # Set outputs for next steps
          echo "app_version=$VERSION" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          echo "build_platform=$PLATFORM" >> $GITHUB_OUTPUT
      
      - name: Update Version Files
        run: |
          VERSION="${{ steps.validation.outputs.app_version }}"
          BUILD_NUMBER="${{ steps.validation.outputs.build_number }}"
          
          echo "🔄 Updating version files..."
          
          # Update pubspec.yaml
          echo "📝 Updating pubspec.yaml: $VERSION+$BUILD_NUMBER"
          sed -i.bak "s/^version: .*/version: $VERSION+$BUILD_NUMBER/" pubspec.yaml
          
          # Update global.dart
          echo "📝 Updating lib/common/libraries/global.dart: $VERSION"
          sed -i.bak "s/String appVersion = '[^']*';/String appVersion = '$VERSION';/" lib/common/libraries/global.dart
          
          # Update iOS marketing version
          echo "📝 Updating iOS marketing version: $VERSION"
          sed -i.bak "s/MARKETING_VERSION = [^;]*/MARKETING_VERSION = $VERSION/" ios/Runner.xcodeproj/project.pbxproj
          
          # Clean up backup files
          rm -f pubspec.yaml.bak lib/common/libraries/global.dart.bak ios/Runner.xcodeproj/project.pbxproj.bak
          
          echo "✅ Version files updated successfully"
      
      - name: Commit Version Updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pubspec.yaml lib/common/libraries/global.dart ios/Runner.xcodeproj/project.pbxproj
          git commit -m "Update version to ${{ steps.validation.outputs.app_version }} (build ${{ steps.validation.outputs.build_number }})" || echo "No changes to commit"
          git push
      
      - name: Summary
        run: |
          echo "## 🎯 Build Preparation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **App Version** | \`${{ steps.validation.outputs.app_version }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Build Number** | \`${{ steps.validation.outputs.build_number }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Platform** | \`${{ steps.validation.outputs.build_platform }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📝 Updated Files" >> $GITHUB_STEP_SUMMARY
          echo "- \`pubspec.yaml\` - version: ${{ steps.validation.outputs.app_version }}+${{ steps.validation.outputs.build_number }}" >> $GITHUB_STEP_SUMMARY
          echo "- \`lib/common/libraries/global.dart\` - appVersion: ${{ steps.validation.outputs.app_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- \`ios/Runner.xcodeproj/project.pbxproj\` - MARKETING_VERSION: ${{ steps.validation.outputs.app_version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **Ready for build steps!**" >> $GITHUB_STEP_SUMMARY

  build-aab:
    name: Building .aab
    needs: prepare-build
    if: ${{ needs.prepare-build.outputs.build_platform == 'Android' || needs.prepare-build.outputs.build_platform == 'Both' }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PRIVATE_REPO_TOKEN || secrets.GITHUB_TOKEN }}
          ref: main
      
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
      
      - name: Cache Android SDK
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.ANDROID_HOME }}
            ~/.android
          key: ${{ runner.os }}-android-sdk-${{ hashFiles('android/build.gradle', 'android/app/build.gradle') }}
          restore-keys: |
            ${{ runner.os }}-android-sdk-
      
      - name: Cache Gradle dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.gradle/daemon
            android/.gradle
            android/app/.gradle
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', 'android/gradle.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}-
            ${{ runner.os }}-gradle-
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.2'
          channel: 'stable'
          cache: true
      
      - name: Cache Flutter pub dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.PUB_CACHE }}
            ~/.pub-cache
            .dart_tool
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}-${{ hashFiles('**/pubspec.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}-
            ${{ runner.os }}-pub-
      
      - name: Cache Kotlin compilation
        uses: actions/cache@v4
        with:
          path: |
            ~/.konan
            ~/.kotlin
            android/build
            android/app/build/intermediates
          key: ${{ runner.os }}-kotlin-${{ hashFiles('**/*.kt', '**/*.gradle*') }}
          restore-keys: |
            ${{ runner.os }}-kotlin-
      
      - name: Configure Git for private repos
        run: |
          TOKEN="${{ secrets.PRIVATE_REPO_TOKEN || secrets.GITHUB_TOKEN }}"
          git config --global url."https://x-access-token:${TOKEN}@github.com/".insteadOf "https://github.com/"
      
      - name: Create key.properties
        run: |
          echo "storePassword=${{ secrets.ANDROID_STORE_PASSWORD }}" > android/key.properties
          echo "keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}" >> android/key.properties
          echo "storeFile=../keystore.jks" >> android/key.properties
      
      - name: Create keystore file
        run: |
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > android/keystore.jks
      
      - name: Update version in local.properties
        run: |
          echo "flutter.versionName=${{ needs.prepare-build.outputs.app_version }}" > android/local.properties
          echo "flutter.versionCode=${{ needs.prepare-build.outputs.build_number }}" >> android/local.properties
          echo "flutter.sdk=$FLUTTER_ROOT" >> android/local.properties
      
      - name: Get Flutter dependencies
        run: flutter pub get
      
      - name: Build App Bundle
        run: flutter build appbundle --release
      
      - name: Upload App Bundle
        uses: actions/upload-artifact@v4
        with:
          name: android-app-bundle-${{ needs.prepare-build.outputs.app_version }}-${{ needs.prepare-build.outputs.build_number }}
          path: build/app/outputs/bundle/release/app-release.aab
          retention-days: 30
      
      - name: Android Build Summary
        run: |
          echo "## 🤖 Android Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Version** | \`${{ needs.prepare-build.outputs.app_version }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Build Number** | \`${{ needs.prepare-build.outputs.build_number }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Bundle Size** | \`$(du -h build/app/outputs/bundle/release/app-release.aab | cut -f1)\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **App Bundle ready for upload to Play Store**" >> $GITHUB_STEP_SUMMARY

  build-ipa:
    name: Building .ipa
    needs: prepare-build
    if: ${{ needs.prepare-build.outputs.build_platform == 'iOS' || needs.prepare-build.outputs.build_platform == 'Both' }}
    runs-on: macos-latest
    permissions:
      contents: read
      packages: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PRIVATE_REPO_TOKEN || secrets.GITHUB_TOKEN }}
          ref: main
      
      - name: Cache CocoaPods dependencies
        uses: actions/cache@v4
        with:
          path: |
            ios/Pods
            ~/.cocoapods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.2'
          channel: 'stable'
          cache: true
      
      - name: Cache Flutter pub dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.PUB_CACHE }}
            ~/.pub-cache
          key: ${{ runner.os }}-pub-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-pub-
      
      - name: Configure Git for private repos
        run: |
          TOKEN="${{ secrets.PRIVATE_REPO_TOKEN || secrets.GITHUB_TOKEN }}"
          git config --global url."https://x-access-token:${TOKEN}@github.com/".insteadOf "https://github.com/"
      
      - name: Get Flutter dependencies
        run: flutter pub get
      
      - name: Install CocoaPods
        run: |
          cd ios
          pod install
      
      - name: Build iOS (No Code Signing)
        run: flutter build ios --release --no-codesign
      
      - name: iOS Build Summary
        run: |
          echo "## 📱 iOS Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Version** | \`${{ needs.prepare-build.outputs.app_version }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Build Number** | \`${{ needs.prepare-build.outputs.build_number }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ℹ️ **iOS build completed without code signing**" >> $GITHUB_STEP_SUMMARY
          echo "📝 **Note:** Code signing and .ipa generation requires Apple Developer certificates" >> $GITHUB_STEP_SUMMARY