name: Build Preparation

on:
  workflow_dispatch:
    inputs:
      app_version:
        description: 'App Version (e.g., 3.37.2)'
        required: true
        type: string
      build_platform:
        description: 'Select build platform'
        required: true
        type: choice
        options:
          - Both
          - Android
          - iOS
        default: Both

jobs:
  prepare-build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Validate and Generate Build Number
        id: version-validation
        run: |
          VERSION="${{ inputs.app_version }}"
          PLATFORM="${{ inputs.build_platform }}"
          
          echo "üîç Validating version: $VERSION"
          echo "üèóÔ∏è Build platform: $PLATFORM"
          
          # Validate version format (x.y.z where x, y, z are numbers)
          if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "‚ùå ERROR: Invalid version format. Expected format: x.y.z (e.g., 3.37.2)"
            exit 1
          fi
          
          # Extract version components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$VERSION"
          
          # Validate ranges
          if (( MAJOR > 99 || MINOR > 99 || PATCH > 999 )); then
            echo "‚ùå ERROR: Version components out of range. Max: 99.99.999"
            exit 1
          fi
          
          # Generate build number using the specified logic
          # Format: MMmmmppp (2 digits major, 2 digits minor, 3 digits patch)
          BUILD_NUMBER=$(printf "%02d%02d%03d" $MAJOR $MINOR $PATCH)
          
          echo "‚úÖ Version validation successful"
          echo "üìã Version: $VERSION"
          echo "üî¢ Generated Build Number: $BUILD_NUMBER"
          echo "üèóÔ∏è Platform: $PLATFORM"
          
          # Set outputs for next steps
          echo "app_version=$VERSION" >> $GITHUB_OUTPUT
          echo "build_number=$BUILD_NUMBER" >> $GITHUB_OUTPUT
          echo "build_platform=$PLATFORM" >> $GITHUB_OUTPUT
          echo "major_version=$MAJOR" >> $GITHUB_OUTPUT
          echo "minor_version=$MINOR" >> $GITHUB_OUTPUT
          echo "patch_version=$PATCH" >> $GITHUB_OUTPUT
      
      - name: Summary
        run: |
          echo "## üéØ Build Preparation Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **App Version** | \`${{ steps.version-validation.outputs.app_version }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Build Number** | \`${{ steps.version-validation.outputs.build_number }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Platform** | \`${{ steps.version-validation.outputs.build_platform }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Major.Minor.Patch** | \`${{ steps.version-validation.outputs.major_version }}.${{ steps.version-validation.outputs.minor_version }}.${{ steps.version-validation.outputs.patch_version }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üî¢ Build Number Generation Logic" >> $GITHUB_STEP_SUMMARY
          echo "- Format: \`MMmmmppp\` (2 digits major, 2 digits minor, 3 digits patch)" >> $GITHUB_STEP_SUMMARY
          echo "- Example: \`3.37.2\` ‚Üí \`03037002\` ‚Üí \`3037002\`" >> $GITHUB_STEP_SUMMARY
          echo "- Example: \`3.4.0\` ‚Üí \`03004000\` ‚Üí \`3004000\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ **Ready for next build steps!**" >> $GITHUB_STEP_SUMMARY
