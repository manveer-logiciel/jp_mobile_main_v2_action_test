name: Build Android

on:
  workflow_call:
    inputs:
      release_tag:
        description: 'Release tag for the build'
        required: true
        type: string
    secrets:
      PRIVATE_REPO_TOKEN:
        required: false
      GITHUB_TOKEN:
        required: true
      ANDROID_KEYSTORE_BASE64:
        required: true
      ANDROID_STORE_PASSWORD:
        required: true
      ANDROID_KEY_PASSWORD:
        required: true
      ANDROID_KEY_ALIAS:
        required: true
      GOOGLE_PLAY_SERVICE_ACCOUNT_JSON:
        required: true

env:
  FLUTTER_VERSION: '3.27.2'
  JAVA_VERSION: '17'

jobs:
  build-android:
    name: Build Android (.aab)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PRIVATE_REPO_TOKEN || secrets.GITHUB_TOKEN }}
          ref: main
      
      # Parallel setup of Java and caching
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}
      
      # Enhanced Flutter caching with better restore keys
      - name: Cache Flutter Dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: flutter-${{ runner.os }}-${{ env.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.lock', '**/pubspec.yaml') }}-android
          restore-keys: |
            flutter-${{ runner.os }}-${{ env.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.lock') }}-
            flutter-${{ runner.os }}-${{ env.FLUTTER_VERSION }}-
            flutter-${{ runner.os }}-
      
      # Enhanced Android caching with build cache
      - name: Cache Android Dependencies & Build
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.gradle/daemon
            ~/.android
            android/.gradle
            android/app/.gradle
            android/build
            ~/.konan
            ~/.kotlin
            /home/runner/.gradle/caches/transforms-*
            /home/runner/.gradle/caches/build-cache-*
          key: android-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties', '**/*.kt') }}-v2
          restore-keys: |
            android-${{ runner.os }}-${{ hashFiles('**/*.gradle*') }}-
            android-${{ runner.os }}-
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
      
      - name: Configure Git for private repos
        run: |
          TOKEN="${{ secrets.PRIVATE_REPO_TOKEN || secrets.GITHUB_TOKEN }}"
          git config --global url."https://x-access-token:${TOKEN}@github.com/".insteadOf "https://github.com/"
      
      # Get Flutter dependencies early for parallel processing
      - name: Get Flutter dependencies
        run: flutter pub get
      
      # Batch Android configuration for better performance
      - name: Configure Android Build Environment
        run: |
          # Create keystore
          echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 --decode > android/keystore.jks
          chmod 600 android/keystore.jks
          
          # Create key.properties
          cat > android/key.properties << EOF
          storePassword=${{ secrets.ANDROID_STORE_PASSWORD }}
          keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
          keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}
          storeFile=../keystore.jks
          EOF
          
          # Extract version info from release tag
          RELEASE_TAG="${{ inputs.release_tag }}"
          VERSION_NAME="$RELEASE_TAG"  # Use release tag directly
          
          # Convert version to build number (e.g., 3.37.2 -> 303700200)
          IFS='.' read -ra VERSION_PARTS <<< "$VERSION_NAME"
          VERSION_CODE="$((${VERSION_PARTS[0]} * 10000000 + ${VERSION_PARTS[1]} * 100000 + ${VERSION_PARTS[2]} * 1000))"
          
          # Update local.properties
          cat > android/local.properties << EOF
          flutter.versionName=$VERSION_NAME
          flutter.versionCode=$VERSION_CODE
          flutter.sdk=$FLUTTER_ROOT
          EOF
          
          echo "✅ Android build environment configured"
      
      - name: Build App Bundle
        run: |
          echo "::notice title=Android Build::🏗️ Building release app bundle..."
          flutter build appbundle --release \
            --dart-define=FLUTTER_WEB_AUTO_DETECT=true \
            --split-debug-info=build/android/debug-info \
            --obfuscate
          echo "::notice title=Android Build::✅ App bundle created successfully"
          
      
      # Deploy to Google Play Console Internal Testing
      - name: Cache Ruby Dependencies & Fastlane
        uses: actions/cache@v4
        with:
          path: |
            android/vendor/bundle
            ~/.gem
            ~/.bundle
            android/.bundle
          key: ruby-fastlane-${{ runner.os }}-${{ hashFiles('android/Gemfile', 'android/Gemfile.lock') }}-v2
          restore-keys: |
            ruby-fastlane-${{ runner.os }}-${{ hashFiles('android/Gemfile') }}-
            ruby-fastlane-${{ runner.os }}-
      
      - name: Setup Ruby for Fastlane
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
          working-directory: android
      
      - name: Setup Google Play Console Service Account
        run: |
          echo "${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}" | base64 --decode > android/play-console-service-account.json
          chmod 600 android/play-console-service-account.json
      
      - name: Deploy to Google Play Console Internal Testing
        run: |
          export AAB_FILE_PATH="$(pwd)/build/app/outputs/bundle/release/app-release.aab"
          cd android
          bundle exec fastlane deploy_internal
        env:
          SUPPLY_JSON_KEY_FILE: play-console-service-account.json
      
      - name: Upload App Bundle (Backup)
        uses: actions/upload-artifact@v4
        if: always()  # Upload even if deployment fails
        with:
          name: android-app-bundle-${{ inputs.release_tag }}
          path: build/app/outputs/bundle/release/app-release.aab
          retention-days: 30
      
      - name: Android Build Summary
        run: |
          echo "## 🤖 Android Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Release Tag** | \`${{ inputs.release_tag }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Bundle Size** | \`$(du -h build/app/outputs/bundle/release/app-release.aab | cut -f1)\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Build Environment" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Version |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Flutter** | \`${{ env.FLUTTER_VERSION }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Java** | \`${{ env.JAVA_VERSION }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Gradle** | \`$(cd android && ./gradlew --version | grep 'Gradle' | head -1 | cut -d' ' -f2)\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Kotlin** | \`$(cd android && ./gradlew --version | grep 'Kotlin:' | cut -d' ' -f9)\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Runner OS** | \`${{ runner.os }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Target SDK** | \`$(grep 'compileSdk' android/app/build.gradle | head -1 | grep -o '[0-9]*')\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Min SDK** | \`$(grep 'minSdk' android/app/build.gradle | head -1 | grep -o '[0-9]*')\` |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ **App Bundle deployed to Google Play Console Internal Testing**" >> $GITHUB_STEP_SUMMARY
