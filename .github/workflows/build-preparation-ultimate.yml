name: Flutter Build - Ultimate Optimized

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Release Tag (e.g., 3.37.2)'
        required: true
        type: string
      verify_release_tag:
        description: 'Verify Release Tag (must match above)'
        required: true
        type: string
      password:
        description: 'Password for secure operations'
        required: true
        type: string
      build_platform:
        description: 'Select build platform'
        required: true
        type: choice
        options:
          - Both
          - Android
          - iOS
        default: Both

env:
  FLUTTER_VERSION: '3.27.2'
  JAVA_VERSION: '17'

jobs:
  prepare-and-validate:
    name: Prepare & Validate
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.validation.outputs.release_tag }}
      build_platform: ${{ steps.validation.outputs.build_platform }}
      should_build_android: ${{ steps.validation.outputs.should_build_android }}
      should_build_ios: ${{ steps.validation.outputs.should_build_ios }}
      version_name: ${{ steps.version.outputs.version_name }}
      version_code: ${{ steps.version.outputs.version_code }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          fetch-tags: true
      
      - name: Validate Inputs
        id: validation
        run: |
          # Quick validation using our script
          source scripts/version-utils.sh
          
          RELEASE_TAG="${{ inputs.release_tag }}"
          PLATFORM="${{ inputs.build_platform }}"
          
          # Validate inputs
          [[ "$RELEASE_TAG" == "${{ inputs.verify_release_tag }}" ]] || { echo "❌ Tag mismatch"; exit 1; }
          [[ "${{ inputs.password }}" == "${{ secrets.RELEASE_PASSWORD }}" ]] || { echo "❌ Invalid password"; exit 1; }
          validate_release_tag "$RELEASE_TAG" || exit 1
          git tag -l | grep -q "^$RELEASE_TAG$" || { echo "❌ Tag not found"; exit 1; }
          
          # Set outputs
          echo "release_tag=$RELEASE_TAG" >> $GITHUB_OUTPUT
          echo "build_platform=$PLATFORM" >> $GITHUB_OUTPUT
          echo "should_build_android=$([[ "$PLATFORM" =~ ^(Android|Both)$ ]] && echo true || echo false)" >> $GITHUB_OUTPUT
          echo "should_build_ios=$([[ "$PLATFORM" =~ ^(iOS|Both)$ ]] && echo true || echo false)" >> $GITHUB_OUTPUT
      
      - name: Calculate Version
        id: version
        run: |
          source scripts/version-utils.sh
          export_version_vars "${{ steps.validation.outputs.release_tag }}"

  # Matrix build with maximum optimization
  build:
    name: Build ${{ matrix.platform }}
    needs: prepare-and-validate
    runs-on: ${{ matrix.os }}
    permissions:
      contents: read
    
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: android
            os: ubuntu-latest
            build_cmd: 'flutter build appbundle --release --dart-define=FLUTTER_WEB_AUTO_DETECT=true --split-debug-info=build/android/debug-info --obfuscate'
            deploy_cmd: 'cd android && bundle exec fastlane deploy_internal'
            artifact_path: 'build/app/outputs/bundle/release/app-release.aab'
          - platform: ios
            os: macos-15
            build_cmd: 'flutter build ipa --release --export-options-plist=ios/ExportOptions.plist --build-name="${{ needs.prepare-and-validate.outputs.version_name }}" --build-number="${{ needs.prepare-and-validate.outputs.version_code }}" --dart-define=FLUTTER_WEB_AUTO_DETECT=true --split-debug-info=build/ios/debug-info --obfuscate'
            deploy_cmd: 'cd ios && bundle exec fastlane deploy_testflight'
            artifact_path: 'build/ios/ipa/*.ipa'
    
    steps:
      # Skip entire job if platform shouldn't be built
      - name: Check if should build
        run: |
          SHOULD_BUILD="false"
          if [[ "${{ matrix.platform }}" == "android" && "${{ needs.prepare-and-validate.outputs.should_build_android }}" == "true" ]]; then
            SHOULD_BUILD="true"
          elif [[ "${{ matrix.platform }}" == "ios" && "${{ needs.prepare-and-validate.outputs.should_build_ios }}" == "true" ]]; then
            SHOULD_BUILD="true"
          fi
          
          if [[ "$SHOULD_BUILD" == "false" ]]; then
            echo "::notice title=Skipping Build::⏭️ Skipping ${{ matrix.platform }} build as not requested"
            exit 78  # Neutral exit code to skip job
          fi
          
          echo "::notice title=Building::🏗️ Building ${{ matrix.platform }} as requested"
      
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PRIVATE_REPO_TOKEN || secrets.GITHUB_TOKEN }}
          fetch-depth: 1
      
      # Use our optimized composite actions
      - name: Setup Flutter
        uses: ./.github/actions/setup-flutter
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          private-token: ${{ secrets.PRIVATE_REPO_TOKEN || secrets.GITHUB_TOKEN }}
          cache-key-suffix: -${{ matrix.platform }}
      
      - name: Setup Android Environment
        if: matrix.platform == 'android'
        uses: ./.github/actions/setup-android
        with:
          java-version: ${{ env.JAVA_VERSION }}
          release-tag: ${{ needs.prepare-and-validate.outputs.release_tag }}
          android-keystore-base64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
          android-store-password: ${{ secrets.ANDROID_STORE_PASSWORD }}
          android-key-password: ${{ secrets.ANDROID_KEY_PASSWORD }}
          android-key-alias: ${{ secrets.ANDROID_KEY_ALIAS }}
      
      - name: Setup iOS Environment
        if: matrix.platform == 'ios'
        uses: ./.github/actions/setup-ios
        with:
          release-tag: ${{ needs.prepare-and-validate.outputs.release_tag }}
      
      # iOS Code Signing (streamlined)
      - name: Setup iOS Code Signing
        if: matrix.platform == 'ios'
        env:
          IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE_BASE64 }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
          IOS_SHARE_EXTENSION_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_SHARE_EXTENSION_PROVISIONING_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.IOS_KEYCHAIN_PASSWORD }}
        run: |
          # Streamlined iOS signing setup
          CERT_PATH=$RUNNER_TEMP/cert.p12
          MAIN_PROFILE=$RUNNER_TEMP/main.mobileprovision
          SHARE_PROFILE=$RUNNER_TEMP/share.mobileprovision
          KEYCHAIN=$RUNNER_TEMP/build.keychain-db
          
          # Decode and setup
          echo -n "$IOS_CERTIFICATE_BASE64" | base64 --decode -o $CERT_PATH
          echo -n "$IOS_PROVISIONING_PROFILE_BASE64" | base64 --decode -o $MAIN_PROFILE
          echo -n "$IOS_SHARE_EXTENSION_PROVISIONING_PROFILE_BASE64" | base64 --decode -o $SHARE_PROFILE
          
          # Keychain setup
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN
          security set-keychain-settings -lut 21600 $KEYCHAIN
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN
          security import $CERT_PATH -P "$IOS_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN
          security list-keychain -d user -s $KEYCHAIN
          
          # Install profiles and configure
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          MAIN_UUID=$(security cms -D -i $MAIN_PROFILE | plutil -extract UUID xml1 -o - -- - | xmllint --xpath "//string/text()" -)
          SHARE_UUID=$(security cms -D -i $SHARE_PROFILE | plutil -extract UUID xml1 -o - -- - | xmllint --xpath "//string/text()" -)
          
          cp $MAIN_PROFILE ~/Library/MobileDevice/Provisioning\ Profiles/$MAIN_UUID.mobileprovision
          cp $SHARE_PROFILE ~/Library/MobileDevice/Provisioning\ Profiles/$SHARE_UUID.mobileprovision
          
          # Configure project (using our functions)
          source scripts/setup-ios.sh
          for target in "97C147061CF9000F007C117D" "97C147071CF9000F007C117D" "249021D4217E4FDB00AE95B9"; do
            safe_pbxproj_set "$target" "PROVISIONING_PROFILE_SPECIFIER" "$MAIN_UUID"
            safe_pbxproj_set "$target" "DEVELOPMENT_TEAM" "${{ secrets.APPLE_TEAM_ID }}"
          done
          for target in "E2B11C5528B6384500902FF7" "E2B11C5628B6384500902FF7" "E2B11C5728B6384500902FF7"; do
            safe_pbxproj_set "$target" "PROVISIONING_PROFILE_SPECIFIER" "$SHARE_UUID"
            safe_pbxproj_set "$target" "DEVELOPMENT_TEAM" "${{ secrets.APPLE_TEAM_ID }}"
          done
      
      # Build
      - name: Build ${{ matrix.platform }}
        run: |
          echo "::notice title=${{ matrix.platform }} Build::🏗️ Building ${{ matrix.platform }}..."
          ${{ matrix.build_cmd }}
          echo "::notice title=${{ matrix.platform }} Build::✅ Build completed"
      
      # Setup Ruby for deployment
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
          working-directory: ${{ matrix.platform }}
      
      # Deploy
      - name: Deploy ${{ matrix.platform }}
        run: |
          if [[ "${{ matrix.platform }}" == "android" ]]; then
            echo "${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}" | base64 --decode > android/play-console-service-account.json
            export AAB_FILE_PATH="$(pwd)/build/app/outputs/bundle/release/app-release.aab"
            export SUPPLY_JSON_KEY_FILE=play-console-service-account.json
          else
            export IPA_FILE_PATH="$(pwd)/$(ls build/ios/ipa/*.ipa)"
          fi
          
          ${{ matrix.deploy_cmd }}
        env:
          # Android specific
          SUPPLY_JSON_KEY_FILE: ${{ matrix.platform == 'android' && 'play-console-service-account.json' || '' }}
          # iOS specific
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
      
      # Upload artifacts only on failure
      - name: Upload Build Artifacts
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ needs.prepare-and-validate.outputs.release_tag }}
          path: ${{ matrix.artifact_path }}
          retention-days: 7
      
      # Cleanup
      - name: Cleanup
        if: always() && matrix.platform == 'ios'
        run: security delete-keychain $RUNNER_TEMP/build.keychain-db || true

  # Lightweight summary
  summary:
    name: Build Summary
    needs: [prepare-and-validate, build]
    if: always() && needs.prepare-and-validate.result == 'success'
    runs-on: ubuntu-latest
    
    steps:
      - name: Generate Summary
        run: |
          echo "## 🚀 Flutter Build Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Platform | Status | Version |" >> $GITHUB_STEP_SUMMARY
          echo "|----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.prepare-and-validate.outputs.should_build_android }}" == "true" ]]; then
            STATUS=$([[ "${{ needs.build.result }}" == "success" ]] && echo "✅ Deployed" || echo "❌ Failed")
            echo "| 🤖 Android | $STATUS | \`${{ needs.prepare-and-validate.outputs.release_tag }}\` |" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [[ "${{ needs.prepare-and-validate.outputs.should_build_ios }}" == "true" ]]; then
            STATUS=$([[ "${{ needs.build.result }}" == "success" ]] && echo "✅ Deployed" || echo "❌ Failed")
            echo "| 📱 iOS | $STATUS | \`${{ needs.prepare-and-validate.outputs.release_tag }}\` |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow:** [\`#${{ github.run_number }}\`](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
