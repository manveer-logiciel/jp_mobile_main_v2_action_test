name: Build iOS

on:
  workflow_call:
    inputs:
      release_tag:
        description: 'Release tag for the build'
        required: true
        type: string
    secrets:
      PRIVATE_REPO_TOKEN:
        required: false
      IOS_DISTRIBUTION_CERTIFICATE_BASE64:
        required: true
      IOS_CERTIFICATE_PASSWORD:
        required: true
      IOS_PROVISIONING_PROFILE_BASE64:
        required: true
      IOS_SHARE_EXTENSION_PROVISIONING_PROFILE_BASE64:
        required: true
      IOS_KEYCHAIN_PASSWORD:
        required: true
      IOS_BUNDLE_ID:
        required: true
      IOS_SHARE_EXTENSION_BUNDLE_ID:
        required: true
      APPLE_TEAM_ID:
        required: true
      APPLE_ID:
        required: true
      APP_STORE_CONNECT_API_KEY_ID:
        required: true
      APP_STORE_CONNECT_API_ISSUER_ID:
        required: true
      APP_STORE_CONNECT_API_KEY:
        required: true

env:
  FLUTTER_VERSION: '3.27.2'

jobs:
  build-ios:
    name: Build iOS
    runs-on: macos-15  # Use macOS-15 to support Xcode 16.4
    permissions:
      contents: read
      packages: read
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.PRIVATE_REPO_TOKEN || github.token }}
          ref: main
      
      # Enhanced Flutter caching for macOS
      - name: Cache Flutter Dependencies  
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            ~/Library/Caches/dart-pub
            .dart_tool
          key: flutter-macOS-${{ env.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.lock', '**/pubspec.yaml') }}-ios
          restore-keys: |
            flutter-macOS-${{ env.FLUTTER_VERSION }}-${{ hashFiles('**/pubspec.lock') }}-
            flutter-macOS-${{ env.FLUTTER_VERSION }}-
            flutter-macOS-
      
      # Enhanced CocoaPods caching with additional paths
      - name: Cache CocoaPods & iOS Build
        uses: actions/cache@v4
        with:
          path: |
            ios/Pods
            ~/.cocoapods
            ~/Library/Caches/CocoaPods
            ios/build
            ios/.symlinks
          key: cocoapods-${{ runner.os }}-${{ hashFiles('**/Podfile.lock', 'ios/Runner.xcodeproj/project.pbxproj') }}-v2
          restore-keys: |
            cocoapods-${{ runner.os }}-${{ hashFiles('**/Podfile.lock') }}-
            cocoapods-${{ runner.os }}-
      
      - name: Select Xcode 16.4
        run: |
          sudo xcode-select --switch /Applications/Xcode_16.4.app/Contents/Developer
          xcodebuild -version
          echo "Selected Xcode version:"
          xcode-select -p
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true
      
      - name: Configure Git for private repos
        run: |
          TOKEN="${{ secrets.PRIVATE_REPO_TOKEN || github.token }}"
          git config --global url."https://x-access-token:${TOKEN}@github.com/".insteadOf "https://github.com/"
      
      # Get Flutter dependencies early for parallel processing
      - name: Get Flutter dependencies
        run: flutter pub get
      
      # Install CocoaPods dependencies with optimization
      - name: Install CocoaPods dependencies
        run: |
          echo "::notice title=iOS Build::üì¶ Installing CocoaPods dependencies..."
          cd ios
          # Only run repo update if cache miss or force update needed
          if [ ! -d "Pods" ] || [ ! -f "Pods/Manifest.lock" ]; then
            pod install --repo-update
          else
            pod install
          fi
          echo "::notice title=iOS Build::‚úÖ CocoaPods dependencies installed"
      
      - name: Configure Xcode Project for Manual Signing
        run: |
          echo "üîß Configuring Xcode project for manual signing..."
          
          # Function to safely set plist value (add if doesn't exist, set if exists)
          safe_pbxproj_set() {
            local target_id="$1"
            local key="$2"
            local value="$3"
            
            if /usr/libexec/PlistBuddy -c "Print :objects:$target_id:buildSettings:$key" ios/Runner.xcodeproj/project.pbxproj >/dev/null 2>&1; then
              /usr/libexec/PlistBuddy -c "Set :objects:$target_id:buildSettings:$key $value" ios/Runner.xcodeproj/project.pbxproj
            else
              /usr/libexec/PlistBuddy -c "Add :objects:$target_id:buildSettings:$key string $value" ios/Runner.xcodeproj/project.pbxproj
            fi
          }
          
          # Configure main app (Runner target) - Debug, Release, Profile
          echo "üì± Configuring main app signing..."
          safe_pbxproj_set "97C147061CF9000F007C117D" "CODE_SIGN_STYLE" "Manual"
          safe_pbxproj_set "97C147071CF9000F007C117D" "CODE_SIGN_STYLE" "Manual"
          safe_pbxproj_set "249021D4217E4FDB00AE95B9" "CODE_SIGN_STYLE" "Manual"
          
          safe_pbxproj_set "97C147061CF9000F007C117D" "CODE_SIGN_IDENTITY" "Apple Distribution"
          safe_pbxproj_set "97C147071CF9000F007C117D" "CODE_SIGN_IDENTITY" "Apple Distribution"
          safe_pbxproj_set "249021D4217E4FDB00AE95B9" "CODE_SIGN_IDENTITY" "Apple Distribution"
          
          # Configure Share Extension target - Debug, Release, Profile
          echo "üì± Configuring Share Extension signing..."
          safe_pbxproj_set "E2B11C5528B6384500902FF7" "CODE_SIGN_STYLE" "Manual"
          safe_pbxproj_set "E2B11C5628B6384500902FF7" "CODE_SIGN_STYLE" "Manual"
          safe_pbxproj_set "E2B11C5728B6384500902FF7" "CODE_SIGN_STYLE" "Manual"
          
          safe_pbxproj_set "E2B11C5528B6384500902FF7" "CODE_SIGN_IDENTITY" "Apple Distribution"
          safe_pbxproj_set "E2B11C5628B6384500902FF7" "CODE_SIGN_IDENTITY" "Apple Distribution"
          safe_pbxproj_set "E2B11C5728B6384500902FF7" "CODE_SIGN_IDENTITY" "Apple Distribution"
          
          echo "‚úÖ Xcode project configured for manual signing (both main app and Share Extension)"
      
      
      # iOS Code Signing Setup
      - name: Setup iOS Code Signing
        env:
          IOS_CERTIFICATE_BASE64: ${{ secrets.IOS_DISTRIBUTION_CERTIFICATE_BASE64 }}
          IOS_CERTIFICATE_PASSWORD: ${{ secrets.IOS_CERTIFICATE_PASSWORD }}
          IOS_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_PROVISIONING_PROFILE_BASE64 }}
          IOS_SHARE_EXTENSION_PROVISIONING_PROFILE_BASE64: ${{ secrets.IOS_SHARE_EXTENSION_PROVISIONING_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.IOS_KEYCHAIN_PASSWORD }}
        run: |
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          MAIN_PROFILE_PATH=$RUNNER_TEMP/main_app.mobileprovision
          SHARE_PROFILE_PATH=$RUNNER_TEMP/share_extension.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          
          # Import certificate and provisioning profiles from secrets
          echo -n "$IOS_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$IOS_PROVISIONING_PROFILE_BASE64" | base64 --decode -o $MAIN_PROFILE_PATH
          echo -n "$IOS_SHARE_EXTENSION_PROVISIONING_PROFILE_BASE64" | base64 --decode -o $SHARE_PROFILE_PATH
          
          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$IOS_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # Install provisioning profiles
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          
          # Extract profile information with streamlined error handling
          MAIN_PROFILE_UUID=$(security cms -D -i $MAIN_PROFILE_PATH | plutil -extract UUID xml1 -o - -- - | xmllint --xpath "//string/text()" - 2>/dev/null || security cms -D -i $MAIN_PROFILE_PATH | grep -A1 "UUID" | grep string | sed 's/.*<string>\(.*\)<\/string>.*/\1/' | head -1)
          SHARE_PROFILE_UUID=$(security cms -D -i $SHARE_PROFILE_PATH | plutil -extract UUID xml1 -o - -- - | xmllint --xpath "//string/text()" - 2>/dev/null || security cms -D -i $SHARE_PROFILE_PATH | grep -A1 "UUID" | grep string | sed 's/.*<string>\(.*\)<\/string>.*/\1/' | head -1)
          MAIN_PROFILE_NAME=$(security cms -D -i $MAIN_PROFILE_PATH | plutil -extract Name xml1 -o - -- - | xmllint --xpath "//string/text()" - 2>/dev/null || security cms -D -i $MAIN_PROFILE_PATH | grep -A1 "Name" | grep string | sed 's/.*<string>\(.*\)<\/string>.*/\1/' | head -1)
          SHARE_PROFILE_NAME=$(security cms -D -i $SHARE_PROFILE_PATH | plutil -extract Name xml1 -o - -- - | xmllint --xpath "//string/text()" - 2>/dev/null || security cms -D -i $SHARE_PROFILE_PATH | grep -A1 "Name" | grep string | sed 's/.*<string>\(.*\)<\/string>.*/\1/' | head -1)
          
          # Validate extracted values
          if [[ -z "$MAIN_PROFILE_UUID" ]] || [[ -z "$MAIN_PROFILE_NAME" ]] || [[ -z "$SHARE_PROFILE_UUID" ]] || [[ -z "$SHARE_PROFILE_NAME" ]]; then
            echo "‚ùå ERROR: Failed to extract provisioning profile information"
            exit 1
          fi
          
          # Install profiles
          cp $MAIN_PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles/$MAIN_PROFILE_UUID.mobileprovision
          cp $SHARE_PROFILE_PATH ~/Library/MobileDevice/Provisioning\ Profiles/$SHARE_PROFILE_UUID.mobileprovision
          
          # Update ExportOptions.plist
          cp ios/ExportOptions.plist ios/ExportOptions.plist.backup
          
          # Function to safely update plist values
          safe_plist_update() {
            local key="$1"
            local value="$2"
            if ! /usr/libexec/PlistBuddy -c "Set :provisioningProfiles:$key \"$value\"" ios/ExportOptions.plist 2>/dev/null; then
              /usr/libexec/PlistBuddy -c "Add :provisioningProfiles:$key string \"$value\"" ios/ExportOptions.plist 2>/dev/null || return 1
            fi
          }
          
          # Update provisioning profiles in ExportOptions.plist
          safe_plist_update "${{ secrets.IOS_BUNDLE_ID }}" "$MAIN_PROFILE_NAME"
          safe_plist_update "${{ secrets.IOS_SHARE_EXTENSION_BUNDLE_ID }}" "$SHARE_PROFILE_NAME"
          
          # Basic bundle ID validation
          MAIN_BUNDLE_ID_FULL=$(security cms -D -i ~/Library/MobileDevice/Provisioning\ Profiles/$MAIN_PROFILE_UUID.mobileprovision | grep -A1 "application-identifier" | grep string | sed 's/.*<string>\(.*\)<\/string>.*/\1/' | head -1)
          MAIN_BUNDLE_ID=$(echo "$MAIN_BUNDLE_ID_FULL" | sed 's/^[^.]*\.//')
          
          if [[ "$MAIN_BUNDLE_ID" != "${{ secrets.IOS_BUNDLE_ID }}" ]]; then
            echo "‚ùå ERROR: Bundle ID mismatch. Expected: ${{ secrets.IOS_BUNDLE_ID }}, Found: $MAIN_BUNDLE_ID"
            exit 1
          fi
          
          echo "‚úÖ iOS code signing setup complete"
          echo "::notice title=iOS Build::üîê Code signing configured successfully"
      
      - name: Configure Provisioning Profile UUIDs in Xcode Project
        run: |
          echo "üîß Setting provisioning profile UUIDs in Xcode project..."
          
          # Get the profile UUIDs that were extracted earlier
          MAIN_PROFILE_PATH=$RUNNER_TEMP/main_app.mobileprovision
          SHARE_PROFILE_PATH=$RUNNER_TEMP/share_extension.mobileprovision
          
          # Use the same robust extraction method as before
          MAIN_PROFILE_UUID=$(security cms -D -i $MAIN_PROFILE_PATH | plutil -extract UUID xml1 -o - -- - | xmllint --xpath "//string/text()" - 2>/dev/null || security cms -D -i $MAIN_PROFILE_PATH | grep -A1 "UUID" | grep string | sed 's/.*<string>\(.*\)<\/string>.*/\1/' | head -1)
          SHARE_PROFILE_UUID=$(security cms -D -i $SHARE_PROFILE_PATH | plutil -extract UUID xml1 -o - -- - | xmllint --xpath "//string/text()" - 2>/dev/null || security cms -D -i $SHARE_PROFILE_PATH | grep -A1 "UUID" | grep string | sed 's/.*<string>\(.*\)<\/string>.*/\1/' | head -1)
          
          # Validate the extracted UUIDs
          if [[ -z "$MAIN_PROFILE_UUID" ]] || [[ -z "$SHARE_PROFILE_UUID" ]]; then
            echo "‚ùå ERROR: Failed to extract provisioning profile UUIDs for Xcode project configuration"
            echo "üìã Main profile UUID: '$MAIN_PROFILE_UUID'"
            echo "üìã Share profile UUID: '$SHARE_PROFILE_UUID'"
            exit 1
          fi
          
          echo "üìã Setting Main app profile UUID: $MAIN_PROFILE_UUID"
          echo "üìã Setting Share extension profile UUID: $SHARE_PROFILE_UUID"
          
          # Function to safely set plist value (add if doesn't exist, set if exists)
          safe_pbxproj_set() {
            local target_id="$1"
            local key="$2"
            local value="$3"
            
            if /usr/libexec/PlistBuddy -c "Print :objects:$target_id:buildSettings:$key" ios/Runner.xcodeproj/project.pbxproj >/dev/null 2>&1; then
              /usr/libexec/PlistBuddy -c "Set :objects:$target_id:buildSettings:$key $value" ios/Runner.xcodeproj/project.pbxproj
            else
              /usr/libexec/PlistBuddy -c "Add :objects:$target_id:buildSettings:$key string $value" ios/Runner.xcodeproj/project.pbxproj
            fi
          }
          
          # Set provisioning profile UUIDs for main app (Runner target) - Debug, Release, Profile
          echo "üì± Setting main app provisioning profile UUIDs..."
          safe_pbxproj_set "97C147061CF9000F007C117D" "PROVISIONING_PROFILE_SPECIFIER" "$MAIN_PROFILE_UUID"
          safe_pbxproj_set "97C147071CF9000F007C117D" "PROVISIONING_PROFILE_SPECIFIER" "$MAIN_PROFILE_UUID"
          safe_pbxproj_set "249021D4217E4FDB00AE95B9" "PROVISIONING_PROFILE_SPECIFIER" "$MAIN_PROFILE_UUID"
          
          # Set development team for main app
          safe_pbxproj_set "97C147061CF9000F007C117D" "DEVELOPMENT_TEAM" "${{ secrets.APPLE_TEAM_ID }}"
          safe_pbxproj_set "97C147071CF9000F007C117D" "DEVELOPMENT_TEAM" "${{ secrets.APPLE_TEAM_ID }}"
          safe_pbxproj_set "249021D4217E4FDB00AE95B9" "DEVELOPMENT_TEAM" "${{ secrets.APPLE_TEAM_ID }}"
          
          # Set provisioning profile UUIDs for Share Extension target - Debug, Release, Profile
          echo "üì± Setting Share Extension provisioning profile UUIDs..."
          safe_pbxproj_set "E2B11C5528B6384500902FF7" "PROVISIONING_PROFILE_SPECIFIER" "$SHARE_PROFILE_UUID"
          safe_pbxproj_set "E2B11C5628B6384500902FF7" "PROVISIONING_PROFILE_SPECIFIER" "$SHARE_PROFILE_UUID"
          safe_pbxproj_set "E2B11C5728B6384500902FF7" "PROVISIONING_PROFILE_SPECIFIER" "$SHARE_PROFILE_UUID"
          
          # Set development team for Share Extension
          safe_pbxproj_set "E2B11C5528B6384500902FF7" "DEVELOPMENT_TEAM" "${{ secrets.APPLE_TEAM_ID }}"
          safe_pbxproj_set "E2B11C5628B6384500902FF7" "DEVELOPMENT_TEAM" "${{ secrets.APPLE_TEAM_ID }}"
          safe_pbxproj_set "E2B11C5728B6384500902FF7" "DEVELOPMENT_TEAM" "${{ secrets.APPLE_TEAM_ID }}"
          
          echo "‚úÖ Provisioning profile UUIDs configured for both main app and Share Extension"
      
      - name: Update iOS Version
        run: |
          # Extract version info from release tag
          RELEASE_TAG="${{ inputs.release_tag }}"
          VERSION="$RELEASE_TAG"  # Use release tag directly
          
          # Convert version to build number (e.g., 3.37.2 -> 303700200)
          IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
          BUILD_NUMBER="$((${VERSION_PARTS[0]} * 10000000 + ${VERSION_PARTS[1]} * 100000 + ${VERSION_PARTS[2]} * 1000))"
          
          echo "üìù Updating iOS version to $VERSION ($BUILD_NUMBER)"
          
          # Function to safely set plist value (add if doesn't exist, set if exists)
          safe_plist_set() {
            local plist_file="$1"
            local key="$2"
            local value="$3"
            
            if /usr/libexec/PlistBuddy -c "Print :$key" "$plist_file" >/dev/null 2>&1; then
              /usr/libexec/PlistBuddy -c "Set :$key $value" "$plist_file"
            else
              /usr/libexec/PlistBuddy -c "Add :$key string $value" "$plist_file"
            fi
          }
          
          # Update Info.plist for main app
          echo "üì± Updating main app Info.plist..."
          safe_plist_set "ios/Runner/Info.plist" "CFBundleShortVersionString" "$VERSION"
          safe_plist_set "ios/Runner/Info.plist" "CFBundleVersion" "$BUILD_NUMBER"
          
          # Update Info.plist for share extension
          echo "üì± Updating share extension Info.plist..."
          safe_plist_set "ios/Share Extension/Info.plist" "CFBundleShortVersionString" "$VERSION"
          safe_plist_set "ios/Share Extension/Info.plist" "CFBundleVersion" "$BUILD_NUMBER"
          
          echo "‚úÖ iOS version updated successfully for main app and share extension"
      
      - name: Build iOS Archive
        run: |
          # Extract version info from release tag
          RELEASE_TAG="${{ inputs.release_tag }}"
          VERSION="$RELEASE_TAG"  # Use release tag directly
          
          # Convert version to build number (e.g., 3.37.2 -> 303700200)
          IFS='.' read -ra VERSION_PARTS <<< "$VERSION"
          BUILD_NUMBER="$((${VERSION_PARTS[0]} * 10000000 + ${VERSION_PARTS[1]} * 100000 + ${VERSION_PARTS[2]} * 1000))"
          
          echo "::notice title=iOS Build::üèóÔ∏è Building iOS archive (.ipa)..."
          flutter build ipa --release \
            --export-options-plist=ios/ExportOptions.plist \
            --build-name="$VERSION" \
            --build-number="$BUILD_NUMBER" \
            --dart-define=FLUTTER_WEB_AUTO_DETECT=true \
            --split-debug-info=build/ios/debug-info \
            --obfuscate
          
          # Quick validation of IPA creation
          if [ ! -f build/ios/ipa/*.ipa ]; then
            echo "‚ùå ERROR: IPA file was not created"
            ls -la build/ios/ipa/ 2>/dev/null || echo "Directory does not exist"
            exit 1
          fi
          
          echo "‚úÖ IPA created: $(ls build/ios/ipa/*.ipa)"
          echo "üì¶ IPA file ready for TestFlight upload"
          echo "::notice title=iOS Build::‚úÖ IPA archive created successfully"
          
          # Verify IPA structure for TestFlight compatibility
          IPA_FILE=$(ls build/ios/ipa/*.ipa)
          echo "üîç Verifying IPA structure..."
          unzip -l "$IPA_FILE" | head -20
      
      # Deploy to TestFlight
      - name: Cache Ruby Dependencies & Fastlane (iOS)
        uses: actions/cache@v4
        with:
          path: |
            ios/vendor/bundle
            ~/.gem
            ~/.bundle
            ios/.bundle
          key: ruby-fastlane-ios-${{ runner.os }}-${{ hashFiles('ios/Gemfile', 'ios/Gemfile.lock') }}-v2
          restore-keys: |
            ruby-fastlane-ios-${{ runner.os }}-${{ hashFiles('ios/Gemfile') }}-
            ruby-fastlane-ios-${{ runner.os }}-
      
      - name: Setup Ruby for Fastlane (iOS)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true
          working-directory: ios
      
      - name: Deploy to TestFlight
        run: |
          # Find and validate IPA file
          IPA_FILES=(build/ios/ipa/*.ipa)
          if [ ! -f "${IPA_FILES[0]}" ]; then
            echo "‚ùå ERROR: No IPA files found in build/ios/ipa/"
            ls -la build/ios/ipa/ || echo "Directory does not exist"
            exit 1
          fi
          
          if [ ${#IPA_FILES[@]} -gt 1 ]; then
            echo "‚ö†Ô∏è  WARNING: Multiple IPA files found, using first one:"
            printf '%s\n' "${IPA_FILES[@]}"
          fi
          
          export IPA_FILE_PATH="$(pwd)/${IPA_FILES[0]}"
          echo "üì± Using IPA file: $IPA_FILE_PATH"
          
          cd ios
          bundle exec fastlane deploy_testflight
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APP_STORE_CONNECT_API_KEY_ID: ${{ secrets.APP_STORE_CONNECT_API_KEY_ID }}
          APP_STORE_CONNECT_API_ISSUER_ID: ${{ secrets.APP_STORE_CONNECT_API_ISSUER_ID }}
          APP_STORE_CONNECT_API_KEY_CONTENT: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
      
      - name: Upload iOS App (.ipa) - Backup
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('build/ios/ipa/*.ipa') != ''
        with:
          name: ios-app-${{ inputs.release_tag }}
          path: build/ios/ipa/*.ipa
          retention-days: 30
      
      - name: Cleanup Keychain
        if: always()
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db || true
      
      - name: iOS Build Summary
        if: always()
        run: |
          echo "## üì± iOS Build Status" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Release Tag** | \`${{ inputs.release_tag }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Bundle ID** | \`$(plutil -extract CFBundleIdentifier xml1 -o - ios/Runner/Info.plist | xmllint --xpath "//string/text()" - 2>/dev/null || echo '${{ secrets.IOS_BUNDLE_ID }}')\` |" >> $GITHUB_STEP_SUMMARY
          
          if [ -f build/ios/ipa/*.ipa ]; then
            echo "| **IPA Size** | \`$(du -h build/ios/ipa/*.ipa | cut -f1)\` |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| **Status** | ‚ùå IPA creation failed |" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîß Build Environment" >> $GITHUB_STEP_SUMMARY
          echo "| Component | Version |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Flutter** | \`${{ env.FLUTTER_VERSION }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Xcode** | \`$(xcodebuild -version | head -1 | cut -d' ' -f2)\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **iOS SDK** | \`$(xcrun --show-sdk-version --sdk iphoneos)\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **macOS SDK** | \`$(xcrun --show-sdk-version --sdk macosx)\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **CocoaPods** | \`$(pod --version)\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Runner OS** | \`${{ runner.os }}\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Min iOS Version** | \`$(plutil -extract MinimumOSVersion xml1 -o - ios/Runner/Info.plist | xmllint --xpath "//string/text()" - 2>/dev/null || grep 'IPHONEOS_DEPLOYMENT_TARGET' ios/Runner.xcodeproj/project.pbxproj | head -1 | grep -o '[0-9]*\.[0-9]*' || echo '12.0')\` |" >> $GITHUB_STEP_SUMMARY
          echo "| **Swift Version** | \`$(xcrun swift --version | head -1 | cut -d' ' -f4)\` |" >> $GITHUB_STEP_SUMMARY
          
          echo "" >> $GITHUB_STEP_SUMMARY
          if [ -f build/ios/ipa/*.ipa ]; then
            echo "‚úÖ **iOS app deployed to TestFlight successfully**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### üöÄ TestFlight Upload Instructions:" >> $GITHUB_STEP_SUMMARY
            echo "1. Download the .ipa artifact from this workflow run" >> $GITHUB_STEP_SUMMARY
            echo "2. Use Xcode ‚Üí Window ‚Üí Organizer ‚Üí Distribute App" >> $GITHUB_STEP_SUMMARY
            echo "3. Or use Transporter app for direct upload" >> $GITHUB_STEP_SUMMARY
            echo "4. Or use altool: \`xcrun altool --upload-app -f [path-to-ipa] --type ios -u [apple-id] -p [app-password]\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå **iOS build failed during IPA export. Check provisioning profiles and code signing configuration.**" >> $GITHUB_STEP_SUMMARY
          fi
