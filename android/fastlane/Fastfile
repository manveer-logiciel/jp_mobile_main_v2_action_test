# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:android)

platform :android do
  desc "Validate build number against Google Play Console"
  lane :validate_build_number do |options|
    version_name = options[:version_name]
    build_number = options[:build_number].to_i
    
    UI.message("ü§ñ Validating Android build number against Google Play Console...")
    UI.message("   Package: com.jobprogress.app")
    UI.message("   Version: #{version_name}")
    UI.message("   Build Number: #{build_number}")
    
    # Get latest version codes from different tracks
    begin
      internal_versions = google_play_track_version_codes(
        package_name: 'com.jobprogress.app',
        track: 'internal',
        json_key: ENV['SUPPLY_JSON_KEY_FILE'] || 'play-console-service-account.json'
      )
      
      production_versions = google_play_track_version_codes(
        package_name: 'com.jobprogress.app',
        track: 'production',
        json_key: ENV['SUPPLY_JSON_KEY_FILE'] || 'play-console-service-account.json'
      )
      
      # Get the highest version codes
      latest_internal = internal_versions.max || 0
      latest_production = production_versions.max || 0
      highest_existing = [latest_internal, latest_production].max
      
      UI.message("üì± Latest Android version codes:")
      UI.message("   Internal Testing: #{latest_internal}")
      UI.message("   Production: #{latest_production}")
      UI.message("   Highest Existing: #{highest_existing}")
      
      # Validate build number
      if build_number <= highest_existing
        UI.user_error!("‚ùå Android build number validation failed!\n" +
                      "   Current build number: #{build_number}\n" +
                      "   Highest existing build number: #{highest_existing}\n" +
                      "   Build number must be greater than #{highest_existing}\n\n" +
                      "üí° To fix this:\n" +
                      "   1. Update the build number in pubspec.yaml to be greater than #{highest_existing}\n" +
                      "   2. For example: version: #{version_name}+#{highest_existing + 1}")
      end
      
      UI.success("‚úÖ Android build number validation passed (#{build_number} > #{highest_existing})")
      
    rescue FastlaneCore::Interface::FastlaneError => ex
      # Re-raise validation errors to fail the workflow
      raise ex
    rescue => ex
      UI.error("Failed to validate build number: #{ex.message}")
      UI.user_error!("‚ùå Could not validate against Google Play Console - failing build\n" +
                    "   This might be due to missing credentials or configuration issues\n" +
                    "   Error: #{ex.message}")
    end
  end

  desc "Deploy a new version to the Google Play Internal Testing track"
  lane :deploy_internal do
    # Get AAB file path from environment variable or use default relative path
    aab_path = ENV['AAB_FILE_PATH'] || "../build/app/outputs/bundle/release/app-release.aab"
    
    # Verify AAB file exists
    unless File.exist?(aab_path)
      UI.user_error!("AAB file not found at #{aab_path}")
    end

    # Upload to Google Play Console Internal Testing
    supply(
      track: 'internal',
      aab: aab_path,
      json_key: ENV['SUPPLY_JSON_KEY_FILE'] || 'play-console-service-account.json',
      package_name: 'com.jobprogress.app',
      skip_upload_apk: true,
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true,
      release_status: 'completed'
    )

    UI.success("Successfully uploaded AAB to Google Play Console Internal Testing! üéâ")
    UI.message("The app will be available for internal testing in a few minutes.")
  end

  desc "Deploy a new version to the Google Play Production track"
  lane :deploy_production do
    # Path to AAB file
    aab_path = "../build/app/outputs/bundle/release/app-release.aab"
    
    unless File.exist?(aab_path)
      UI.user_error!("AAB file not found at #{aab_path}")
    end

    # Upload to Google Play Console Production
    supply(
      track: 'production',
      aab: aab_path,
      json_key: ENV['SUPPLY_JSON_KEY_FILE'] || 'play-console-service-account.json',
      package_name: 'com.jobprogress.app',
      skip_upload_apk: true,
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true,
      release_status: 'completed'
    )

    UI.success("Successfully uploaded AAB to Google Play Console Production! üöÄ")
  end

  desc "Deploy a new version to the Google Play Beta track"
  lane :deploy_beta do
    # Path to AAB file
    aab_path = "../build/app/outputs/bundle/release/app-release.aab"
    
    unless File.exist?(aab_path)
      UI.user_error!("AAB file not found at #{aab_path}")
    end

    # Upload to Google Play Console Beta
    supply(
      track: 'beta',
      aab: aab_path,
      json_key: ENV['SUPPLY_JSON_KEY_FILE'] || 'play-console-service-account.json',
      package_name: 'com.jobprogress.app',
      skip_upload_apk: true,
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true,
      release_status: 'completed'
    )

    UI.success("Successfully uploaded AAB to Google Play Console Beta! üéØ")
  end

  desc "Promote a release from internal to beta"
  lane :promote_internal_to_beta do
    supply(
      track: 'internal',
      track_promote_to: 'beta',
      json_key: ENV['SUPPLY_JSON_KEY_FILE'] || 'play-console-service-account.json',
      package_name: 'com.jobprogress.app',
      skip_upload_aab: true,
      skip_upload_apk: true,
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true
    )

    UI.success("Successfully promoted from Internal to Beta! üìà")
  end

  desc "Promote a release from beta to production"
  lane :promote_beta_to_production do
    supply(
      track: 'beta',
      track_promote_to: 'production',
      json_key: ENV['SUPPLY_JSON_KEY_FILE'] || 'play-console-service-account.json',
      package_name: 'com.jobprogress.app',
      skip_upload_aab: true,
      skip_upload_apk: true,
      skip_upload_metadata: true,
      skip_upload_images: true,
      skip_upload_screenshots: true
    )

    UI.success("Successfully promoted from Beta to Production! üöÄ")
  end

  error do |lane, exception|
    UI.error("Error in lane #{lane}: #{exception.message}")
    # You can add custom error handling here, like sending notifications
  end
end
